import{_ as a,c as i,a as t,o as e}from"./app-CCZupzhC.js";const o={};function r(n,l){return e(),i("div",null,l[0]||(l[0]=[t('<h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><ul><li>算术运算符: +，―，*，/，%，++，--</li><li>关系运算符: &gt;，&lt;，&gt;=，&lt;=，==，!=</li><li>逻辑运算符: !，&amp; , | , ^ , &amp;&amp;，||</li><li>位运算符: &amp;，|，^，~ ， &gt;&gt;，&lt;&lt;，&gt;&gt;&gt;</li><li>赋值运算符: = 扩展赋值运算符:+=，―=，*=，/= • 字符串连接运算符: +</li></ul><h3 id="_1-算术运算符" tabindex="-1"><a class="header-anchor" href="#_1-算术运算符"><span>1 算术运算符</span></a></h3><ul><li>类型： +，―，*，/，%，++，――</li><li>/：除 。 15/4 (整除) 15.0/2 (实数除法)</li><li>%：取余 。 100%3 = 1</li><li>++, -- 。自加、自减。<mark>符号在前，先自加减再运算。符号在后，先运算再自加减</mark></li><li>^不是乘方，位运算。</li></ul><hr><h3 id="_2-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_2-逻辑运算符"><span>2 逻辑运算符</span></a></h3><ul><li>逻辑运算符功能 <ul><li>!逻辑非 ；&amp;逻辑与 ； |逻辑或</li><li>^ 逻辑异或； &amp;&amp;短路与； ||短路或</li></ul></li><li>注意点： <ul><li>所谓短路运算与非短路运算结果相同。 <ul><li>&amp;&amp;前边的为false直接为false，后边的不再运算。</li><li>|| 前边的为true直接为true，后边的不再运算。</li></ul></li><li>a^b = !(a&amp;b)</li></ul></li></ul><hr><h3 id="_3-位运算符" tabindex="-1"><a class="header-anchor" href="#_3-位运算符"><span>3 位运算符</span></a></h3><ul><li>~取反。 <code>~10001000 = 01110111</code></li><li>&amp;按位与。 <code>11001100 &amp; 10100000 = 10000000</code> =&gt; 有0就是0</li><li>|按位或。 <code>11001100 | 10100000 = 11101100</code> =&gt;有1就是1</li><li>^按位异或。 <code>11001100 ^ 10100000 = 01101100</code> =&gt;相同为0，不同为1</li><li>&lt;&lt;左移。 <code>11001100 &lt;&lt; 2 = 1100110000</code> =&gt; 将二进制数逐位左移，最低位空出的位补0;</li><li><code>&gt;&gt;</code>带符号右移。 <code>1111111111001100 &gt;&gt; 2 = 1111111111110011</code> =&gt; 将二进制数逐位右移，最高位空出的位补原来的符号位;</li><li><code>&gt;&gt;&gt;</code>无符号右移。 <code>1111111111001100 &gt;&gt; 2 = 0011111111110011</code> =&gt; 将二进制数逐位右移，最高位空出的位补0;</li></ul><p>移位运算符性质</p><ul><li>适用数据类型:byte、short、char、int、long</li><li>对低于int型的操作数将先自动转换为int型再移位(整型提升，对所有的运算都是这样)</li><li>对于int型整数移位a&gt;&gt;b，系统先将b对32取模，得到的结果才是真正移位的位数</li><li>对于long型整数移位时a&gt;&gt;b ，则是先将移位位数b对64取模</li></ul><hr><h3 id="_4-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_4-赋值运算符"><span>4 赋值运算符</span></a></h3><ul><li>当“=”两侧的数据类型不一致时，可以适用默认类型转换或强制类型转换(casting)原则进行处理：<code>long l = 100;int i = (int)l;</code></li><li>特例:可以将整型常量直接赋值给byte, short, char等类型变量，而不需要进行强制类型转换，只要不超出其表数范围<code>byte b = 12; //合法byte b = 4096; //非法,超范围 </code></li></ul><hr><h3 id="_5-字符串连接运算符" tabindex="-1"><a class="header-anchor" href="#_5-字符串连接运算符"><span>5 字符串连接运算符 +</span></a></h3><ul><li>&quot;+&quot; 除用于算术加法运算外，还可用于对字符串进行连接操作</li><li>&quot;+&quot;运算符两侧的操作数中只要有一个是字符串(String)类型，系统会自动将另一个操作数转换为字符串然后再进行连接： <code>String s = &quot;hello, &quot; + 305 + &quot;号&quot;;System.out.println(s); //输出:hello, 305号</code></li></ul><h2 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式"><span>表达式</span></a></h2><ul><li>表达式是符合一定语法规则的运算符和操作数的序列</li><li>表达式的类型和值 <ul><li>对表达式中操作数进行运算得到的结果称为表达式的值</li><li>表达式的值的数据类型即为表达式的类型</li></ul></li><li>表达式的运算顺序 <ul><li>首先应按照运算符的优先级从高到低的顺序进行</li><li>优先级相同的运算符按照事先约定的结合方向进行</li></ul></li><li>表达式中的类型转换 <ul><li>当有不同种类的混合运算时：int-&gt;long-&gt;float-&gt;double</li><li>整型提升：所有的byte, short, char 参与算术运算等转为int</li></ul></li></ul><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展"><span>扩展</span></a></h3><p>使用 <code>javap –c 类名</code> 来查看反汇编的代码</p>',22)]))}const d=a(o,[["render",r]]),c=JSON.parse('{"path":"/programmingJava/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%8C%97%E5%A4%A7/mv2hs5ml/","title":"运算符与表达式","lang":"zh-CN","frontmatter":{"title":"运算符与表达式","createTime":"2025/04/14 16:41:24","permalink":"/programmingJava/Java程序设计北大/mv2hs5ml/"},"headers":[],"readingTime":{"minutes":2.79,"words":836},"git":{"updatedTime":1754301252000,"contributors":[{"name":"WillBetter","username":"WillBetter","email":"WillWillBetter@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/WillBetter?v=4","url":"https://github.com/WillBetter"}]},"filePathRelative":"notes/programming/Java/Java程序设计北大/3.数据运算-流控制-数组/2.运算符与表达式.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"93b803","sort":10001,"name":"programming"},{"id":"ea3a17","sort":10004,"name":"Java"},{"id":"2ad0a4","sort":10005,"name":"Java程序设计北大"},{"id":"a84f38","sort":3,"name":"数据运算-流控制-数组"}]}');export{d as comp,c as data};
