import{_ as s,c as a,a as e,o as n}from"./app-CCZupzhC.js";const l={};function h(t,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h2 id="_1-接口" tabindex="-1"><a class="header-anchor" href="#_1-接口"><span>1 接口</span></a></h2><p>接口：某种特征的约定，使用<code>interface</code>定义,它的所有方法都自动是<code>public abstract</code>，通过<code>implements</code>实现，可进行多继承实现。</p><p>接口非常重要，Java中有大量的接口 =&gt; 面向接口编程，而不是面向实现</p><h3 id="_1-1-接口的作用" tabindex="-1"><a class="header-anchor" href="#_1-1-接口的作用"><span>1.1 接口的作用</span></a></h3><ol><li>通过接口可以实现不相关类的相同行为，而不需要考虑这些类之间的层次关系。从而在一定意义上实现了多重继承。</li><li>通过接口可以指明多个类需要实现的方法。</li><li>通过接口可以了解对象的交互界面，而不需了解对象所对应的类。</li></ol><h3 id="_1-2-接口的定义" tabindex="-1"><a class="header-anchor" href="#_1-2-接口的定义"><span>1.2 接口的定义</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 接口定义示例</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">interface</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Collection</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Object </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> delete</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Object </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Object </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">find</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Object </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> );</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>通常接口名称以able或ible结尾，表明接口能完成一定的行为。</li><li>接口声明中还可以包括对接口的访问权限以及它的父接口列表。<code>[public] interface interfaceName [extends listOfSuperInterface]{ ... }</code><ul><li>使用<code>public</code>指明任意类均可以使用这个接口；缺省情况下，只有与该接口定义在同一个包中的类才可以访问这个接口。</li><li>extends子句与类声明中的extends子句基本相同，但接口可以实现多继承，子接口继承父接口中所有的常量和方法。</li></ul></li><li>接口方法的定义格式为:<code>returnType methodName ( [paramlist] );</code><ul><li>接口中只进行方法的声明，而不提供方法的实现，在接口中声明的方法具有public和abstract属性。定义的时候这两个关键词是可以省略的。</li><li>子接口中定义了和父接口同名的常量或相同的方法，则父接口中的常量被隐藏，方法被重载。</li></ul></li></ol><hr><h3 id="_1-3-接口的实现" tabindex="-1"><a class="header-anchor" href="#_1-3-接口的实现"><span>1.3 接口的实现</span></a></h3><p>在类的声明中用implements子句来表示一个类使用某个接口。</p><ul><li>在类体中可以使用接口中定义的常量。</li><li>必须实现接口中定义的所有方法，且方法的声明必须与接口中所定义的完全一致。。</li><li>一个类可以实现多个接口。</li></ul><details class="hint-container details"><summary>实现示例</summary><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> FIFOQueue</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> implements</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> collection</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Object </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ){}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // ..... 其他抽象方法也必须实现</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h3 id="_1-4-接口类型" tabindex="-1"><a class="header-anchor" href="#_1-4-接口类型"><span>1.4 接口类型</span></a></h3><p>接口可以作为一种引用类型来使用。任何实现该接口的类的实例都可以存储在该接口类型的变量中，通过这些变量可以访问类所实现的接口中的方法。Java运行时系统动态地确定该使用哪个类中的方法。</p><p>把接口作为一种数据类型可以不需要了解对象所对应的具体的类。示例代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ){</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //接口作为引用类型使用</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    Collection</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> FIFOQueue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    ......</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //调用FIFOQueue实例的add()</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_1-5-接口中的常量" tabindex="-1"><a class="header-anchor" href="#_1-5-接口中的常量"><span>1.5 接口中的常量</span></a></h3><p>接口体中可以包含常量定义，格式为：<code>type NAME = value;</code>。</p><ul><li>type可以是任意类型，NAME是常量名，通常用大写，value是常量值。</li><li>接口中定义的常量可以被实现该接口的多个类共享，它与C中用#define以及C++中用const定义的常量是相同的。</li><li>在接口中定义的常量具有public, static, final的属性。</li></ul><hr><h3 id="_1-6-java8中的接口" tabindex="-1"><a class="header-anchor" href="#_1-6-java8中的接口"><span>1.6 Java8中的接口</span></a></h3><p>Java8以上，接口成员还可以是:</p><ul><li>static方法</li><li>具有实现体的方法 (default方法)：提供了一个默认实现，子类在implements可以不用再重新写了</li></ul><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h2><p>从JDK1.5起，可以使用枚举。Java中的枚举是用class来实现的，可以复杂地使用.</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">enum</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Light</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> Red</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> Yellow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> Green</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Ligth</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> light</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Light</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Red</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// case后面不写为 Light.Red</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">switch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> light </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> case</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Red</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> .....</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Break</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29)]))}const p=s(l,[["render",h]]),d=JSON.parse('{"path":"/programmingJava/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%8C%97%E5%A4%A7/weyz51v5/","title":"接口和枚举","lang":"zh-CN","frontmatter":{"title":"接口和枚举","createTime":"2025/05/07 09:39:16","permalink":"/programmingJava/Java程序设计北大/weyz51v5/"},"headers":[],"readingTime":{"minutes":3.21,"words":963},"git":{"updatedTime":1754301252000,"contributors":[{"name":"WillBetter","username":"WillBetter","email":"WillWillBetter@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/WillBetter?v=4","url":"https://github.com/WillBetter"}]},"filePathRelative":"notes/programming/Java/Java程序设计北大/4.类、包和接口/4.接口和枚举.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"93b803","sort":10001,"name":"programming"},{"id":"ea3a17","sort":10004,"name":"Java"},{"id":"2ad0a4","sort":10005,"name":"Java程序设计北大"},{"id":"01dfb7","sort":4,"name":"类、包和接口"}]}');export{p as comp,d as data};
