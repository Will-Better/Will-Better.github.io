import{_ as e,c as h,a as n,b as s,d as a,e as l,r as d,o as p}from"./app-CCZupzhC.js";const k="/notes/qdjczstx/0100HTMLswdt.png",r="/notes/qdjczstx/0102marklanguage.png",o="/notes/qdjczstx/0103dictionaryMode.png",g="/notes/qdjczstx/0101script.webp",u={},c={class:"hint-container details"},y={id:"_1-作用",tabindex:"-1"},m={class:"header-anchor",href:"#_1-作用"},D={id:"_2-常见的doctype-声明",tabindex:"-1"},v={class:"header-anchor",href:"#_2-常见的doctype-声明"},A={id:"_3-区别",tabindex:"-1"},b={class:"header-anchor",href:"#_3-区别"},B={id:"_2-1-meta",tabindex:"-1"},f={class:"header-anchor",href:"#_2-1-meta"},C={id:"_3-1-html语义化",tabindex:"-1"},E={class:"header-anchor",href:"#_3-1-html语义化"},x={id:"_3-2-行内元素、块级元素、空-void-元素有那些",tabindex:"-1"},q={class:"header-anchor",href:"#_3-2-行内元素、块级元素、空-void-元素有那些"},T={id:"_3-3-src和href的区别",tabindex:"-1"},M={class:"header-anchor",href:"#_3-3-src和href的区别"},w={id:"_3-4-img的srcset属性的作用",tabindex:"-1"},L={class:"header-anchor",href:"#_3-4-img的srcset属性的作用"},S={id:"_3-5-title与h1的区别、b与strong的区别、i与em的区别",tabindex:"-1"},F={class:"header-anchor",href:"#_3-5-title与h1的区别、b与strong的区别、i与em的区别"},H={id:"_3-6-iframe-有那些优点和缺点",tabindex:"-1"},_={class:"header-anchor",href:"#_3-6-iframe-有那些优点和缺点"},O={id:"_3-7-label的作用及使用",tabindex:"-1"},P={class:"header-anchor",href:"#_3-7-label的作用及使用"},W={id:"_3-8-a-除了导航外-还有什么作用",tabindex:"-1"},j={class:"header-anchor",href:"#_3-8-a-除了导航外-还有什么作用"},I={id:"_4-1-script-中defer和async的区别",tabindex:"-1"},R={class:"header-anchor",href:"#_4-1-script-中defer和async的区别"},N={id:"_5-1-web-worker",tabindex:"-1"},V={class:"header-anchor",href:"#_5-1-web-worker"},J={id:"_5-2-html5离线储存的使用和原理",tabindex:"-1"},Y={class:"header-anchor",href:"#_5-2-html5离线储存的使用和原理"},G={id:"_5-3-canvas和svg的区别",tabindex:"-1"},U={class:"header-anchor",href:"#_5-3-canvas和svg的区别"},K={id:"_5-4-渐进增强和优雅降级之间的区别",tabindex:"-1"},z={class:"header-anchor",href:"#_5-4-渐进增强和优雅降级之间的区别"},X={id:"_5-5-html5-drag-api",tabindex:"-1"},Q={class:"header-anchor",href:"#_5-5-html5-drag-api"},$={id:"_5-6-html5的更新",tabindex:"-1"},Z={class:"header-anchor",href:"#_5-6-html5的更新"},ii={id:"_5-7-seo相关知识",tabindex:"-1"},si={class:"header-anchor",href:"#_5-7-seo相关知识"};function li(ti,i){const t=d("Badge");return p(),h("div",null,[i[43]||(i[43]=n('<p><img src="'+k+`" alt="HTML思维导图"></p><h2 id="一-基础概念" tabindex="-1"><a class="header-anchor" href="#一-基础概念"><span>一 基础概念</span></a></h2><p>浏览器查看的网页都是.html或.htm文件。前端组成网页最基础的三层为：</p><ul><li>HTML(结构层)：超文本标记语言(Hypertext Markup Language)</li><li>css(样式层)</li><li>JavaScript(行为层)</li></ul><p>HTML由一系列的元素组成，通常称为HTML元素。HTML元素通常被用来定义一个网页结构，基本上所有网页都是这样的HTML 结构：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> &lt;!-- &lt;html&gt;元素是页面的根元素，它描述完整的网页 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">head</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">head</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- &lt;head&gt;元素包含了我们想包含在 HTML 页面中，但不希望显示在网页里的内容； --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">元素包含了我们访问页面时所有显示在页面上的内容</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">html</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-浏览器加载html流程" tabindex="-1"><a class="header-anchor" href="#二-浏览器加载html流程"><span>二 浏览器加载HTML流程</span></a></h2><ol><li>浏览器从服务器获取HTML内容。</li><li>浏览器获取成功后，就从上到下解析HTML的元素。</li><li><code>&lt;head&gt;</code>元素内容会先被解析，此时浏览器还没开始渲染页面。当浏览器解析到<code>&lt;head&gt;</code>中的<code>&lt;script&gt;</code>元素时，会暂停解析并下载JavaScript脚本。 <ul><li>可以使用 <code>defer</code> / <code>async</code> / <code>preload</code> 等属性来标记<code>&lt;script&gt;</code>标签，来控制JavaScript的加载顺序。 <code>&lt;script src=&quot;&quot; ... async&gt;&lt;/script&gt;</code></li><li>解析遇到link、script、img标签时，浏览器会向服务器发送请求资源。script的加载或者执行都会阻塞html解析、其他下载线程以及渲染线程。</li><li>link加载完css后会解析为CSSOM(层叠样式表对象模型,一棵仅含有样式信息的树)。css的加载和解析不会阻塞html的解析，但会阻塞渲染。</li><li>img的加载不会阻塞html的解析，但img加载后并不渲染，它需要等待Render Tree生成完后才和Render Tree一起渲染出来。未下载完的图片需等下载完后才渲染。</li></ul></li><li>当JavaScript脚本下载完成后，浏览器的控制权转交给 JavaScript 引擎。当脚本执行完成后，控制权会交回给渲染引擎，渲染引擎继续往下解析 HTML ⻚面。</li><li>此时 <code>&lt;body&gt;</code> 元素内容开始被解析，当css解析为CSSOM后，html解析为DOM后，两者将会结合在一起生成Render Tree(渲染树)。</li><li>Layout: 计算出Render Tree每个节点的具体位置。</li><li>Painting：通过显卡，将Layout后的节点内容(含已下载图片)分别呈现到屏幕上。</li></ol><h2 id="三-html知识点" tabindex="-1"><a class="header-anchor" href="#三-html知识点"><span>三 HTML知识点</span></a></h2>`,9)),s("blockquote",null,[i[4]||(i[4]=s("p",null,"优先级划分",-1)),s("ol",null,[s("li",null,[a(t,{type:"danger",text:"1"}),i[0]||(i[0]=l(" 考察很多"))]),s("li",null,[a(t,{type:"tip",text:"2"}),i[1]||(i[1]=l(" 考察较多"))]),s("li",null,[a(t,{type:"warning",text:"3"}),i[2]||(i[2]=l(" 考察较少"))]),s("li",null,[a(t,{type:"info",text:"4"}),i[3]||(i[3]=l(" 考察很少"))])]),i[5]||(i[5]=s("p",null,"被多个资料提及的会有+号标识",-1))]),i[44]||(i[44]=s("h3",{id:"_1-html",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-html"},[s("span",null,[l("1 "),s("code",null,"<html>")])])],-1)),i[45]||(i[45]=s("h4",{id:"_1-1-doctype-文档类型",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-1-doctype-文档类型"},[s("span",null,"1.1 DOCTYPE(⽂档类型)")])],-1)),s("details",c,[i[15]||(i[15]=s("summary",null,"详情",-1)),i[16]||(i[16]=s("p",null,[s("code",null,"<!DOCTYPE>"),l(" 是 HTML 文件的文档类型声明，简称DTD，位于HTML文档的第一行。它的作用是告知浏览器该网页使用的是哪个版本的HTML规范，让浏览器按照对应版本的HTML语法进行解析页面。")],-1)),s("h5",y,[s("a",m,[s("span",null,[i[6]||(i[6]=l("① ")),i[7]||(i[7]=s("strong",null,"作用",-1)),i[8]||(i[8]=l()),a(t,{type:"tip",text:"2+"})])])]),i[17]||(i[17]=n("<p>不同的 DOCTYPE 声明会触发不同的浏览器渲染模式，浏览器渲染模式主要有三种：</p><ul><li>标准模式、严格模式（Standards Mode）：遵循 W3C 的 HTML 和 CSS 标准，确保浏览器按照 W3C 标准解析代码。</li><li>怪异模式、混杂模式、兼容模式（Quirks Mode）：浏览器使用自己的方式解析网页，主要用于向后兼容旧版的浏览器行为，允许一些不符合标准的写法。</li><li>准标准模式（Almost Standards Mode）：类似标准模式，浏览器会尽量遵循W3C标准，但在某些方面可能不如标准模式严格。</li></ul><p>可通过<code>document.compatMode</code>获取浏览器渲染模式 =&gt; <code>CSS1Compat</code>严格模式,<code>BackCompat</code>混杂模式。eg:语雀官网的文档类型是<code>CSS1Compat</code></p>",3)),s("h5",D,[s("a",v,[s("span",null,[i[9]||(i[9]=l("② ")),i[10]||(i[10]=s("strong",null,"常见的DOCTYPE 声明",-1)),i[11]||(i[11]=l()),a(t,{type:"warning",text:"3"})])])]),i[18]||(i[18]=n('<p><strong>进化史</strong><img src="'+r+'" alt="DOCTYPE标记语言进化史"></p><ol><li>HTML5 之前，DOCTYPE 声明都需要引入DTD，因为HTML5之前都是基于SGML，而 DTD 规定的是标记语言的规则，这样浏览器才能正确地呈现内容。 <ol><li>HTML 4.01 <code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</code></li><li>XHTML 1.0 <code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</code></li></ol></li><li>HTML不再基于SGML，无需引入DTD。<code>&lt;!DOCTYPE html&gt;</code></li></ol><p><strong>声明与模式</strong><img src="'+o+'" alt="DOCTYPE声明与模式"></p><ol><li>如果文档包含严格的 DOCTYPE ，那么它一般以严格模式呈现。（严格 DTD——严格模式）</li><li>包含过渡 DTD 和 URI 的 DOCTYPE，以严格模式呈现。（有URI的过渡 DTD——严格模式）</li><li>包含过渡 DTD 而没有 URI（统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现。（没有URI的过渡DTD——混杂模式）</li><li>DOCTYPE 不存在或形式不正确会导致文档以混杂模式呈现。（DTD 不存在或者格式不正确——混杂模式）</li><li>HTML5 没有 DTD ，因此也就没有严格模式与混杂模式的区别，HTML5 有相对宽松的语法，实现时，已经尽可能大的实现了向后兼容。</li></ol>',4)),s("h5",A,[s("a",b,[s("span",null,[i[12]||(i[12]=l("③ ")),i[13]||(i[13]=s("strong",null,"区别",-1)),i[14]||(i[14]=l()),a(t,{type:"tip",text:"2+"})])])]),i[19]||(i[19]=s("ul",null,[s("li",null,"盒模型：在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，然而在Quirks模式下，IE的宽度和高度还包含了padding和border"),s("li",null,"设置行内元素的高宽：在Standards模式下，给行内元素设置width和height都不会生效，而在Quriks模式下会生效"),s("li",null,"用margin：0 auto设置水平居中:在Standards模式下，设置margin：0 auto；可以使元素水平居中，但是在Quriks模式下失效"),s("li",null,"设置百分比高度:在Standards模式下，元素的高度是由包含的内容决定的，如果父元素没有设置百分比的高度，子元素设置百分比的高度是无效的")],-1))]),i[46]||(i[46]=n('<hr><h4 id="_1-2-lang-了解即可" tabindex="-1"><a class="header-anchor" href="#_1-2-lang-了解即可"><span>1.2 <code>lang</code> 了解即可</span></a></h4><p><code>lang</code>属性用于设置页面的默认语言，尤其在国际化网站上非常重要。搜索引擎和浏览器会根据此属性理解网页内容。<code>&lt;html lang=&quot;en&quot;&gt;</code></p><hr><h3 id="_2-head" tabindex="-1"><a class="header-anchor" href="#_2-head"><span>2 <code>&lt;head&gt;</code></span></a></h3><p><code>&lt;head&gt;</code>用于定义文档的头部，描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。</p><p><code>&lt;head&gt;</code>可包含的标签：<code>&lt;base&gt;, &lt;link&gt;, &lt;meta&gt;, &lt;script&gt;, &lt;style&gt;, &lt;title&gt;</code>。</p>',7)),s("h4",B,[s("a",f,[s("span",null,[i[20]||(i[20]=l("2.1 ")),i[21]||(i[21]=s("code",null,"<meta>",-1)),i[22]||(i[22]=l()),a(t,{type:"tip",text:"2"})])])]),i[47]||(i[47]=n(`<p><code>&lt;meta&gt;</code>用来描述网页文档的属性，比如网页的作者，网页描述，关键词等。</p><details class="hint-container details"><summary>常⽤的meta标签</summary><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">head</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- charset，用来描述HTML文档的编码类型,常用：国际通用：UTF-8、中文国际：gb2312、gbk，乱码多因为内容和网页编码的不符 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">meta</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> charset</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">UTF-8</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">meta</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">keywords</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">页面关键词</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">meta</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">description</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">页面描述内容</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- refresh，页面重定向和刷新 content=&quot;5; URL=page2.html&quot; 5s后跳转page2.html; content=&quot;60&quot; 1分钟后刷新当前页面--&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">meta</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> http-equiv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">refresh</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">0;url=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- viewport，适配移动端，可以控制视口的大小和比例： --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">meta</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">viewport</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">width=device-width, initial-scale=1, maximum-scale=1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- content 参数有以下几种：  --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- width viewport ：宽度(数值/device-width)； height viewport ：高度(数值/device-height)  --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- initial-scale ：初始缩放比例； maximum-scale ：最大缩放比例；minimum-scale ：最小缩放比例 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- user-scalable ：是否允许用户缩放(yes/no） --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- 搜索引擎索引方式 了解 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">meta</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">robots</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">index,follow</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- content 参数有以下几种： --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- all：文件将被检索，且页面上的链接可以被查询； none：文件将不被检索，且页面上的链接不可以被查询； --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- index：文件将被检索；follow：页面上的链接可以被查询； --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!-- noindex：文件将不被检索；nofollow：页面上的链接不可以被查询。 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">head</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h4 id="_2-2-title-、-link" tabindex="-1"><a class="header-anchor" href="#_2-2-title-、-link"><span>2.2 <code>&lt;title&gt;</code>、<code>&lt;link&gt;</code></span></a></h4><ul><li><code>&lt;title&gt;</code> 用来设置页面标题，head标签中唯一必需的元素。在浏览器的标签页中显示。 <code>&lt;title&gt;My Website&lt;/title&gt;</code></li><li><code>&lt;link&gt;</code> 用来引入外部资源，最常见的用途是链接样式表和图标。 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;</code></li></ul><p><strong><code>&lt;link&gt;</code> 优化资源链接</strong></p><p>将<code>&lt;link&gt;</code> 的dns-prefetch 与 preconnect ，优化跨源请求</p><ul><li><code>dns-prefetch</code>: 浏览器会对某个域名预先进行 DNS 解析并缓存。这样，当浏览器在请求同域名资源的时候，能省去从域名查询 IP 的过程，从而减少时间损耗</li><li><code>preconnect</code>: 让浏览器在一个 HTTP 请求正式发给服务器前预先执行一些操作，这包括 DNS 解析、TLS 协商、TCP 握手，通过消除往返延迟来为用户节省时间。</li></ul><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">link</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> rel</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">preconnect</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> href</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">https://fonts.googleapis.com/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> crossorigin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">link</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> rel</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">dns-prefetch</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> href</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">https://fonts.googleapis.com/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但使用时需要注意：<code>dns-prefetch</code> 仅对跨源域上的 DNS 查找有效</p><hr><h3 id="_3-body" tabindex="-1"><a class="header-anchor" href="#_3-body"><span>3 <code>&lt;body&gt;</code></span></a></h3>`,12)),s("h4",C,[s("a",E,[s("span",null,[i[23]||(i[23]=l("3.1 HTML语义化 ")),a(t,{type:"danger",text:"1+"})])])]),i[48]||(i[48]=n(`<ul><li>语义化：指根据内容选择合适的标签。</li><li>优点： <ol><li>使开发者更容易读懂。语义类标签增强了可读性，结构更加清晰，开发者能清晰的看出网页的结构，便于团队的开发与维护</li><li>使浏览器更容易读懂，理解其结构。便于搜索引擎爬取信息，便于SEO。除此之外，语义类还支持读屏软件，根据文章可以自动生成目录。</li></ol></li><li>常见的语义化标签：<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">header</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">头部</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">header</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">nav</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">导航栏</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">nav</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">section</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">区块（有语义化的div）</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">section</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">主要区域</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">article</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">主要内容</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">article</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">aside</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">侧边栏</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">aside</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">footer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">底部</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">footer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr>`,2)),s("h4",x,[s("a",q,[s("span",null,[i[24]||(i[24]=l("3.2 行内元素、块级元素、空(void)元素有那些？ ")),a(t,{type:"danger",text:"1++"})])])]),i[49]||(i[49]=n("<ul><li>行内元素有： <code>display:inline/inline-block;</code> a、 b、 span、 img、 input、 select、 strong；</li><li>块级元素有：<code>display:block/table;</code> div、 ul、 ol、 li、 dl、 dt、 dd、 h1~h6、 p；</li><li>空元素，即没有内容的HTML元素。空元素是在开始标签中关闭的，也就是空元素没有闭合标签： <ul><li>常见的有：<code>&lt;br&gt;、&lt;hr&gt;、&lt;img&gt;、&lt;input&gt;、&lt;link&gt;、&lt;meta&gt;</code>；</li><li>鲜见的有：<code>&lt;area&gt;、&lt;base&gt;、&lt;col&gt;、&lt;colgroup&gt;、&lt;command&gt;、&lt;embed&gt;、&lt;keygen&gt;、&lt;param&gt;、&lt;source&gt;、&lt;track&gt;、&lt;wbr&gt;</code>。</li></ul></li></ul>",1)),s("h4",T,[s("a",M,[s("span",null,[i[25]||(i[25]=l("3.3 src和href的区别 ")),a(t,{type:"danger",text:"1+"})])])]),i[50]||(i[50]=n("<p>src和href都是用来引用外部的资源，只是影响下载，不会阻塞渲染。</p><p>是否阻塞跟href和src没有关系，跟浏览器实现最佳体检的设计有关。</p><p><strong>区别：</strong></p><ul><li>src：表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。 <ul><li>src会将其指向的资源下载并应⽤到⽂档内，如请求js脚本。当浏览器解析到该元素时，会<strong>暂停其他资源的下载和处理</strong>，直到将该资源加载、编译、执⾏完毕，所以⼀般js脚本会放在页面底部。 <blockquote><p>js阻塞渲染不是因为它是src引入的，而是因为它可能会改变DOM树或CSSOM树。</p></blockquote></li></ul></li><li>href：表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。 <ul><li>当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在a、link等标签上。</li></ul></li></ul><hr>",5)),s("h4",w,[s("a",L,[s("span",null,[i[26]||(i[26]=l("3.4 img的srcset属性的作⽤ ")),a(t,{type:"warning",text:"3"})])])]),i[51]||(i[51]=s("p",null,[l("根据屏幕的像素密度设置不同图片。 "),s("code",null,'<img src="image-128.png" srcset="image-256.png 2x" />'),l(" 屏幕像素密度为1x的情况下加载image-128.png, 屏幕像素密度为2x时加载image-256.png。")],-1)),i[52]||(i[52]=s("p",null,[l("也可使用宽度描述符w来指定图片宽度，适合根据屏幕尺寸来选择图片。 "),s("code",null,'<img src="image-128.png" srcset="image-128.png 128w, image-256.png 256w, image-512.png 512w" sizes="(max-width: 128px) 128px, (max-width: 256px) 256px,521px" />')],-1)),i[53]||(i[53]=s("p",null,[s("strong",null,"image其他属性")],-1)),i[54]||(i[54]=s("ul",null,[s("li",null,"alt：切换的意思，如果无法显示图像，浏览器将显示alt指定的内容"),s("li",null,"title：当鼠标移动到元素上时显示title的内容")],-1)),i[55]||(i[55]=s("hr",null,null,-1)),s("h4",S,[s("a",F,[s("span",null,[i[27]||(i[27]=l("3.5 title与h1的区别、b与strong的区别、i与em的区别 ")),a(t,{type:"tip",text:"2+"})])])]),i[56]||(i[56]=s("ul",null,[s("li",null,"strong标签有语义，是起到加重语气的效果，而b标签是没有的，b标签只是一个简单加粗标签。b标签之间的字符都设为粗体，strong标签加强字符的语气都是通过粗体来实现的，而搜索引擎更侧重strong标签。"),s("li",null,"title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取有很大的影响"),s("li",null,"i内容展示为斜体，em表示强调的文本")],-1)),i[57]||(i[57]=s("hr",null,null,-1)),s("h4",H,[s("a",_,[s("span",null,[i[28]||(i[28]=l("3.6 iframe 有那些优点和缺点 ")),a(t,{type:"info",text:"4+"})])])]),i[58]||(i[58]=n("<p>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。</p><p><strong>优点：</strong></p><ul><li>用来加载速度较慢的内容（如广告）</li><li>可以使脚本可以并行下载</li><li>可以实现跨子域通信</li></ul><p><strong>缺点：</strong></p><ul><li>iframe 会阻塞主页面的 onload 事件</li><li>无法被一些搜索引擎索识别</li><li>会产生很多页面，不容易管理</li></ul><hr>",6)),s("h4",O,[s("a",P,[s("span",null,[i[29]||(i[29]=l("3.7 label的作用及使用 ")),a(t,{type:"warning",text:"3+"})])])]),i[59]||(i[59]=n(`<details class="hint-container details"><summary>详情</summary><p>label标签来定义表单控件的关系：当用户选择label标签时，浏览器会自动将焦点转到和label标签相关的表单控件上。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">mobile</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">使用方法1:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">mobile</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">使用方法2 Date:</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">input</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">text</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">label</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr>`,2)),s("h4",W,[s("a",j,[s("span",null,[i[30]||(i[30]=l("3.8 ")),i[31]||(i[31]=s("code",null,"<a>",-1)),i[32]||(i[32]=l("除了导航外，还有什么作用？ ")),a(t,{type:"warning",text:"3"})])])]),i[60]||(i[60]=n('<p><code>&lt;a&gt;</code>的href属性中的url可以是浏览器支持的任何协议。</p><ol><li>打电话：<code>&lt;a href=&quot;tel:110&quot;&gt;110&lt;/a&gt;</code></li><li>发短信：<code>&lt;a href=&quot;sms:110&quot;&gt;110&lt;/a&gt;</code></li><li>发邮件</li><li>做锚点</li><li>下载文件</li></ol><h3 id="_4-script-和-style" tabindex="-1"><a class="header-anchor" href="#_4-script-和-style"><span>4 <code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code></span></a></h3><p><code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>即可位于<code>&lt;head&gt;</code>也可位于<code>&lt;body&gt;</code>，出于性能考虑，常将<code>&lt;script&gt;</code>放在<code>&lt;body&gt;</code>的最下方， <code>&lt;style&gt;</code>放在<code>&lt;head&gt;</code>中。</p>',4)),s("h4",I,[s("a",R,[s("span",null,[i[33]||(i[33]=l("4.1 ")),i[34]||(i[34]=s("code",null,"<script>",-1)),i[35]||(i[35]=l(" 中defer和async的区别 ")),a(t,{type:"danger",text:"1"})])])]),i[61]||(i[61]=s("p",null,"如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就会开始加载和执行，这样就阻塞了后续文档的加载。",-1)),i[62]||(i[62]=s("p",null,"下图可以直观的看出三者之间的区别: 其中蓝色代表js脚本网络加载时间，红色代表js脚本执行时间，绿色代表html解析。",-1)),i[63]||(i[63]=s("p",null,[s("img",{src:g,alt:"script加载执行"})],-1)),i[64]||(i[64]=s("ul",null,[s("li",null,[s("strong",null,"defer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析")]),s("li",null,"多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行；")],-1)),i[65]||(i[65]=s("h3",{id:"_5-其他",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-其他"},[s("span",null,"5 其他")])],-1)),s("h4",N,[s("a",V,[s("span",null,[i[36]||(i[36]=l("5.1 web worker ")),a(t,{type:"tip",text:"2"})])])]),i[66]||(i[66]=s("p",null,"web worker 是运行在后台的 js，独立于其他脚本，不会影响页面的性能。 并且通过 postMessage 将结果回传到主线程。这样在进行复杂操作的时候，就不会阻塞主线程了。",-1)),i[67]||(i[67]=s("p",null,"创建 web worker流程：",-1)),i[68]||(i[68]=s("ol",null,[s("li",null,"检测浏览器对于 web worker 的支持性"),s("li",null,"创建 web worker 文件（js，回传函数等）"),s("li",null,"创建 web worker 对象")],-1)),i[69]||(i[69]=s("hr",null,null,-1)),s("h4",J,[s("a",Y,[s("span",null,[i[37]||(i[37]=l("5.2 HTML5离线储存的使用和原理 ")),a(t,{type:"info",text:"4"})])])]),i[70]||(i[70]=n(`<p>离线存储指的是：在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。</p><p>目前该方法已被弃用，官方推荐service worker的方式做缓存。</p><details class="hint-container details"><summary>详情</summary><h5 id="_1-原理" tabindex="-1"><a class="header-anchor" href="#_1-原理"><span>① 原理</span></a></h5><p>HTML5的离线存储是基于一个新建的 .appcache 文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p><h5 id="_2-使用方法" tabindex="-1"><a class="header-anchor" href="#_2-使用方法"><span>② 使用方法</span></a></h5><ol><li>创建一个和 html 同名的 manifest 文件，然后在页面头部加入 manifest 属性。<code>&lt;html lang=&quot;en&quot; manifest=&quot;index.manifest&quot;&gt;</code></li><li>在 <code>cache.manifest</code> 文件中编写需要离线存储的资源。<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CACHE MANIFEST</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  #v0.11</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CACHE:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  js/app.js</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  css/style.css</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">NETWORK:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  resourse/logo.png</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FALLBACK:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  / /offline.html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>CACHE: 表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出来。优先级高于NETWORK。</li><li>NETWORK: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储。</li><li>FALLBACK：表示如果访问某一个资源失败，那么就使用它的资源来替换。</li></ul></li><li>在离线状态时，操作 <code>window.applicationCache</code> 进行离线缓存的操作。</li></ol><h5 id="_3-何更新缓存" tabindex="-1"><a class="header-anchor" href="#_3-何更新缓存"><span>③ 何更新缓存</span></a></h5><ol><li>更新 manifest 文件</li><li>通过 javascript 操作</li><li>清除浏览器缓存</li></ol><h5 id="_4-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-注意事项"><span>④ 注意事项</span></a></h5><ol><li>浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。</li><li>如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。</li><li>引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。</li><li>FALLBACK 中的资源必须和 manifest 文件同源。</li><li>当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。</li><li>站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。</li><li>当 manifest 文件发生改变时，资源请求本身也会触发更新。</li></ol><h5 id="_5-浏览器管理和加载html5-的离线储存资源" tabindex="-1"><a class="header-anchor" href="#_5-浏览器管理和加载html5-的离线储存资源"><span>⑤ 浏览器管理和加载HTML5 的离线储存资源</span></a></h5><ul><li>在线的情况下，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件， <ol><li>如果是第一次访问页面 ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。</li><li>如果已经访问过页面并且资源已经进行离线存储了，那么浏览器就会使用离线的资源加载页面，</li><li>然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，就会重新下载文件中的资源并进行离线存储。</li></ol></li><li>离线的情况下，浏览器会直接使用离线存储的资源。</li></ul></details><hr>`,4)),s("h4",G,[s("a",U,[s("span",null,[i[38]||(i[38]=l("5.3 Canvas和SVG的区别 ")),a(t,{type:"tip",text:"2"})])])]),i[71]||(i[71]=n(`<details class="hint-container details"><summary>详情</summary><h5 id="_1-svg" tabindex="-1"><a class="header-anchor" href="#_1-svg"><span>① SVG</span></a></h5><p>SVG可缩放矢量图形（Scalable Vector Graphics）是基于可扩展标记语言XML描述的2D图形的语言，SVG基于XML就意味着SVG DOM中的每个元素都是可用的，可以为某个元素附加Javascript事件处理器。在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</p><blockquote><p>矢量图，也称为面向对象的图像或绘图图像，在数学上定义为一系列由线连接的点。矢量文件中的图形元素称为对象。每个对象都是一个自成一体的实体，它具有颜色、形状、轮廓、大小和屏幕位置等属性。</p></blockquote><p><strong>特点：</strong></p><ul><li>不依赖分辨率</li><li>支持事件处理器</li><li>最适合带有大型渲染区域的应用程序（比如谷歌地图）</li><li>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</li><li>不适合游戏应用</li></ul><hr><h5 id="_2-canvas" tabindex="-1"><a class="header-anchor" href="#_2-canvas"><span>② Canvas</span></a></h5><p>Canvas是画布，通过Javascript来绘制2D图形，是逐像素进行渲染的。其位置发生改变，就会重新进行绘制。</p><p><strong>特点：</strong></p><ul><li>依赖分辨率</li><li>不支持事件处理器</li><li>弱的文本渲染能力</li><li>能够以 .png 或 .jpg 格式保存结果图像</li><li>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</li></ul><p><strong>代码演示</strong></p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">canvas</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">myCanvas</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> width</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">200</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> height</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">200</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">myCanvas</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> ctx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> canvas</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getContext</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">2d</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  ctx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fillStyle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">red</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  ctx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fillRect</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">50</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 50</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr>`,2)),s("h4",K,[s("a",z,[s("span",null,[i[39]||(i[39]=l("5.4 渐进增强和优雅降级之间的区别 ")),a(t,{type:"warning",text:"3"})])])]),i[72]||(i[72]=n("<ol><li>渐进增强（progressive enhancement）：主要是针对低版本的浏览器进行页面重构，保证基本的功能情况下，再针对高级浏览器进行效果、交互等方面的改进和追加功能，以达到更好的用户体验。 <strong>内容为主</strong></li><li>优雅降级（graceful degradation）： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。<strong>浏览器为主</strong></li></ol><p><strong>两者区别：</strong></p><ul><li>优雅降级是从复杂的现状开始的，并试图减少用户体验的供给；而</li><li>渐进增强是从一个非常基础的，能够起作用的版本开始的，并在此基础上不断扩充，以适应未来环境的需要；</li><li>降级（功能衰竭）意味着往回看，而渐进增强则意味着往前看，同时保证其根基处于安全地带。</li></ul><hr>",4)),s("h4",X,[s("a",Q,[s("span",null,[i[40]||(i[40]=l("5.5 HTML5 drag API ")),a(t,{type:"info",text:"4"})])])]),i[73]||(i[73]=s("ul",null,[s("li",null,"dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发。"),s("li",null,"darg：事件主体是被拖放元素，在正在拖放被拖放元素时触发。"),s("li",null,"dragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。"),s("li",null,"dragover：事件主体是目标元素，在被拖放在某元素内移动时触发。"),s("li",null,"dragleave：事件主体是目标元素，在被拖放元素移出目标元素是触发。"),s("li",null,"drop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。"),s("li",null,"dragend：事件主体是被拖放元素，在整个拖放操作结束时触发。")],-1)),i[74]||(i[74]=s("hr",null,null,-1)),s("h4",$,[s("a",Z,[s("span",null,[i[41]||(i[41]=l("5.6 HTML5的更新 ")),a(t,{type:"danger",text:"1+"})])])]),i[75]||(i[75]=n(`<details class="hint-container details"><summary>具体内容</summary><h5 id="_1-语义化标签" tabindex="-1"><a class="header-anchor" href="#_1-语义化标签"><span>① 语义化标签</span></a></h5><ul><li>header：定义文档的页眉（头部）；</li><li>nav：定义导航链接的部分；</li><li>footer：定义文档或节的页脚（底部）；</li><li>article：定义文章内容；</li><li>section：定义文档中的节（section、区段）；</li><li>aside：定义其所处内容之外的内容（侧边）；</li></ul><hr><h5 id="_2-媒体标签" tabindex="-1"><a class="header-anchor" href="#_2-媒体标签"><span>② 媒体标签</span></a></h5><ul><li>audio：音频。<code>&lt;audio src=&#39;&#39; controls autoplay loop=&#39;true&#39;&gt;&lt;/audio&gt;</code><ul><li>controls 控制面板</li><li>autoplay 自动播放</li><li>loop=‘true’ 循环播放</li></ul></li><li>video：视频。<code>&lt;video src=&#39;&#39; poster=&#39;imgs/aa.jpg&#39; controls&gt;&lt;/video&gt;</code><ul><li>poster：默认第一帧，可自己指定</li><li>width/height</li></ul></li><li>source标签: 因为浏览器对视频格式支持程度不一样，为了能够兼容不同的浏览器，可以通过source来指定视频源. <code>&lt;video&gt;&lt;source src=&#39;aa.flv&#39; type=&#39;video/flv&#39;&gt;&lt;/source&gt; &lt;/video&gt;</code></li></ul><hr><h5 id="_3-表单" tabindex="-1"><a class="header-anchor" href="#_3-表单"><span>③ 表单</span></a></h5><p><strong>表单类型</strong></p><ul><li>email ：能够验证当前输入的邮箱地址是否合法</li><li>url ： 验证URL</li><li>number ： 只能输入数字，其他输入不了，而且自带上下增大减小箭头，max属性可以设置为最大值，min可以设置为最小值，value为默认值。</li><li>search ： 输入框后面会给提供一个小叉，可以删除输入的内容，更加人性化。</li><li>range ： 可以提供给一个范围，其中可以设置max和min以及value，其中value属性可以设置为默认值</li><li>color ： 提供了一个颜色拾取器</li><li>time ： 时分秒</li><li>data ： 日期选择年月日</li><li>datatime ： 时间和日期(目前只有Safari支持)</li><li>datatime-local ：日期时间控件</li><li>week ：周控件</li><li>month：月控件</li></ul><p><strong>表单属性</strong></p><ul><li>placeholder ：提示信息</li><li>autofocus ：自动获取焦点</li><li>autocomplete=“on” 或者 autocomplete=“off” 使用这个属性需要有两个前提： <ul><li>表单必须提交过</li><li>必须有name属性。</li></ul></li><li>required：要求输入框不能为空，必须有值才能够提交。</li><li>pattern=&quot; &quot; 里面写入想要的正则模式，例如手机号patte=&quot;^(+86)?\\d{10}$&quot;</li><li>multiple：可以选择多个文件或者多个邮箱</li><li>form=&quot; form表单的ID&quot;</li></ul><p><strong>表单事件</strong></p><ul><li>oninput 每当input里的输入框内容发生变化都会触发此事件。</li><li>oninvalid 当验证不通过时触发此事件。</li></ul><hr><h5 id="_4-进度条、度量器" tabindex="-1"><a class="header-anchor" href="#_4-进度条、度量器"><span>④ 进度条、度量器</span></a></h5><ul><li>progress标签：用来表示任务的进度（IE、Safari不支持），max用来表示任务的进度，value表示已完成多少</li><li>meter属性：用来显示剩余容量或剩余库存（IE、Safari不支持） <ul><li>high/low：规定被视作高/低的范围</li><li>max/min：规定最大/小值</li><li>value：规定当前度量值</li></ul></li></ul><hr><h5 id="_5-dom查询操作" tabindex="-1"><a class="header-anchor" href="#_5-dom查询操作"><span>⑤ DOM查询操作</span></a></h5><ul><li>document.querySelector()</li><li>document.querySelectorAll()</li></ul><p>标签、类(.class)、ID(#ID)都可查询</p><hr><h5 id="_6-web存储" tabindex="-1"><a class="header-anchor" href="#_6-web存储"><span>⑥ Web存储</span></a></h5><p>HTML5 提供了两种在客户端存储数据的新方法：</p><ul><li>localStorage： 没有时间限制的数据存储，只可手动删除</li><li>sessionStorage： 针对一个 session 的数据存储，页面关闭数据清除</li></ul><table><thead><tr><th>类别</th><th>初始化</th><th>过期时间</th><th>当前浏览器回话状态</th><th>是否随请求发送</th><th>容量/域名</th><th>权限</th></tr></thead><tbody><tr><td>cookie</td><td>客户端或服务器，服务器可以使用 Set-Cookie 请求头。</td><td>手动设置</td><td>取决于是否设置了过期时间</td><td>是，Cookies 会通过 Cookie 请求头，自动发送给服务器</td><td>4kb</td><td>任意窗口</td></tr><tr><td>localStorage</td><td>客户端</td><td>永不过期</td><td>是</td><td>否</td><td>5MB</td><td>任意窗口</td></tr><tr><td>sessionStorage</td><td>客户端</td><td>当前页面关闭时</td><td>否</td><td>否</td><td>5MB</td><td>当前页面窗口</td></tr></tbody></table><hr><h5 id="_7-其他" tabindex="-1"><a class="header-anchor" href="#_7-其他"><span>⑦ 其他</span></a></h5><ol><li>拖放特性及相关方法。 <code>&lt;img draggable=&quot;true&quot; /&gt;</code></li><li>画布（canvas ）。canvas 元素使用 JavaScript 在网页上绘制图像。<code>&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot;&gt;&lt;/canvas&gt;</code></li><li>SVG：可伸缩矢量图形，使用 XML 格式定义。改变尺寸时图形质量不会有损失。</li><li>地理定位：Geolocation（地理定位）用于定位用户的位置。</li><li>websocket(通信协议)：基于TCP传输协议，并复用HTTP的握手通道。</li></ol><hr><h5 id="_8-怎么处理html5新标签兼容问题" tabindex="-1"><a class="header-anchor" href="#_8-怎么处理html5新标签兼容问题"><span>⑧ 怎么处理HTML5新标签兼容问题</span></a></h5><ol><li>实现标签被识别：通过document.createElement(tagName)方法可以让浏览器识别新的标签，浏览器支持新标签后。还可以为新标签添加CSS样式。</li><li>用JavaScript解决：使用HTML5的shim框架，在head标签中调用以下代码：</li></ol><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;!--[if lt IE 9]&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    &lt;script&gt; src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&lt;/script&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  &lt;![endif]--&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr>`,2)),s("h4",ii,[s("a",si,[s("span",null,[i[42]||(i[42]=l("5.7 SEO相关知识 ")),a(t,{type:"danger",text:"1"})])])]),i[76]||(i[76]=n('<p><strong>SEO的TDK</strong></p><p>在SEO中，TDK其实就是title、meta(description)、meta(keywords)这三个标签。搜素权限：<code>title &gt; description &gt; keywords</code></p><p><strong>前端需要注意那些SEO</strong></p><ol><li><code>title、meta(keywords/description)</code>合理使用： - 搜素权限：<code>title &gt; description &gt; keywords</code></li></ol><ul><li><code>title</code>：强调重点，重要关键词出现不超过两次</li><li><code>description</code>：内容高度概括，长度合适</li><li><code>keywords</code>：重要关键词</li></ul><ol start="2"><li><code>HTML</code> 语义化</li><li>重要内容不要用 <code>js</code> 输出：爬虫不会爬取 <code>js</code> 执行内容</li><li>非装饰性图片添加 <code>alt</code> 属性</li><li>少用 <code>iframe</code>：搜索引擎不会抓取 <code>iframe</code> 内容</li><li>提高网站速度：搜索引擎排序的一个重要指标</li><li>重要内容 <code>HTML</code> 代码放在最前：搜索引擎抓取 <code>HTML</code> 顺序是从上到下，而且存在内容上限</li></ol><hr><h3 id="_6-扩展" tabindex="-1"><a class="header-anchor" href="#_6-扩展"><span>6 扩展</span></a></h3><h4 id="_1-web-components-web-组件-需代码学习" tabindex="-1"><a class="header-anchor" href="#_1-web-components-web-组件-需代码学习"><span>1 <code>Web Components</code> web 组件 =&gt; 需代码学习</span></a></h4><p><code>Web Components</code>使得浏览器有了原生支持组件化的能力。创建可重用的定制元素 =&gt; 类似于Vue的组件</p><p><strong>三大将</strong></p><ol><li><p>Custom elements（自定义元素）</p><p>一组JavaScript API，定义custom elements及其行为，可以在用户界面中按需使用。</p></li><li><p>Shadow DOM（影子DOM）</p></li></ol><ul><li>一组JavaScript API，用于将封装的“影子”DOM树附加到元素（与主文档DOM分开呈现）并控制其关联的功能。</li><li>目的：保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。</li></ul><ol start="3"><li><p>HTML templates（HTML模板）</p><p><code>&lt;templete&gt;</code> 和 <code>&lt;slot&gt;</code> 元素可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。</p></li></ol>',14))])}const ni=e(u,[["render",li]]),ei=JSON.parse('{"path":"/programmingFrontend/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/756ria8w/","title":"HTML","lang":"zh-CN","frontmatter":{"title":"HTML","createTime":"2025/04/09 18:21:55","permalink":"/programmingFrontend/前端基础知识体系/756ria8w/"},"headers":[],"readingTime":{"minutes":22.94,"words":6881},"git":{"updatedTime":1754301252000,"contributors":[{"name":"WillBetter","username":"WillBetter","email":"WillWillBetter@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/WillBetter?v=4","url":"https://github.com/WillBetter"}]},"filePathRelative":"notes/programming/frontend/前端基础知识体系/1.HTML与CSS/1.HTML.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"93b803","sort":10001,"name":"programming"},{"id":"283a67","sort":10002,"name":"frontend"},{"id":"ab1911","sort":10003,"name":"前端基础知识体系"},{"id":"d53da8","sort":1,"name":"HTML与CSS"}]}');export{ni as comp,ei as data};
