import{_ as s,c as t,a,o as l}from"./app-CCZupzhC.js";const e={};function n(h,i){return l(),t("div",null,i[0]||(i[0]=[a(`<h2 id="_1-控制符" tabindex="-1"><a class="header-anchor" href="#_1-控制符"><span>1 控制符</span></a></h2><p>控制符又叫修饰符，可以修饰类、也可以修饰类的成员(字段、方法)。修饰符(modifiers)分为两类：</p><ol><li>访问修饰符(access modifiers)：如public/private等</li><li>其他修饰符（非访问修饰符）：如abstract等</li></ol><h2 id="_2-访问控制符" tabindex="-1"><a class="header-anchor" href="#_2-访问控制符"><span>2 访问控制符</span></a></h2><p>又叫权限修饰符</p><h3 id="_2-1-成员的访问控制符" tabindex="-1"><a class="header-anchor" href="#_2-1-成员的访问控制符"><span>2.1 成员的访问控制符</span></a></h3><table><thead><tr><th>修饰符</th><th>同一个类中</th><th>同一个包中</th><th>不同包中的子类</th><th>不同包中的非子类</th></tr></thead><tbody><tr><td>private</td><td>Yes</td><td>-</td><td>-</td><td>-</td></tr><tr><td>默认</td><td>Yes</td><td>Yes</td><td>-</td><td>-</td></tr><tr><td>protected</td><td>Yes</td><td>Yes</td><td>Yes</td><td>-</td></tr><tr><td>public</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr></tbody></table><hr><h3 id="_2-2-类的访问控制符" tabindex="-1"><a class="header-anchor" href="#_2-2-类的访问控制符"><span>2.2 类的访问控制符</span></a></h3><p>类的访问控制符或者为public，或者默认。<code>public class 类名{ ... }</code> 或 <code>class 类名{ ... }</code></p><ul><li>类用public修饰，则该类可以被其他类所访问;</li><li>类默认访问控制符，则该类只能被同包中的类访问。</li></ul><hr><h3 id="_2-3-setter与getter" tabindex="-1"><a class="header-anchor" href="#_2-3-setter与getter"><span>2.3 setter与getter</span></a></h3><p>将字段用private修饰，从而更好地将信息进行封装和隐藏。可使用setXXXX和getXXXX方法对类的private属性进行存取，这就是该字段的setter与getter。其优点如下：</p><ol><li>属性用private更好地封装和隐藏，外部类不能随意存取和修改。</li><li>提供方法来存取对象的属性，在方法中可以对给定的参数的合法性进行检验。</li><li>方法可以用来给出计算后的值。</li><li>方法可以完成其他必要的工作(如清理资源、设定状态，等等)。</li><li>当只提供getXXXX方法，而不提供setXXXX方法，可以保证属性是只读的。</li></ol><details class="hint-container details"><summary>代码示例</summary><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Person2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> setAge</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">age</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> age</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">200</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> getAge</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_3-其他修饰符-非访问修饰符" tabindex="-1"><a class="header-anchor" href="#_3-其他修饰符-非访问修饰符"><span>3 其他修饰符(非访问修饰符)</span></a></h2><table><thead><tr><th>修饰符</th><th>基本含义</th><th>修饰类</th><th>修饰成员</th><th>修饰局部变量</th></tr></thead><tbody><tr><td>static</td><td>静态的、非实例的、类的</td><td>可以修饰内部类</td><td>Yes</td><td>-</td></tr><tr><td>final</td><td>最终的、不可改变的</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>abstract</td><td>抽象的、不可实例化的</td><td>Yes</td><td>Yes</td><td>-</td></tr></tbody></table><h3 id="_3-1-static" tabindex="-1"><a class="header-anchor" href="#_3-1-static"><span>3.1 static</span></a></h3><p>用static修饰符修饰的方法仅属于类的静态方法，又称为类方法。不用static修饰的方法，则为实例方法。</p><ul><li>static类方法的本质是该方法是属于整个类的，不是属于某个实例的，它在内存中的代码段将随着类的定义而进行分配和装载，不被任何一个对象专有。</li><li>static方法不能操纵和处理属于某个对象的成员变量，只能处理属于整个类的成员变量， <ul><li>static方法只能处理本类中的static域或调用static方法。</li><li>static方法中，不能访问实例变量，不能使用this或super。</li></ul></li><li>调用static方法应该使用类名直接调用，也可以用某一个具体的对象名。 <code>Math.random()，Integer.parseInt()</code></li><li>非static的方法是属于某个对象的方法，在这个对象创建时，对象的方法在内存中拥有自己专用的代码段。</li></ul><p><strong>import static</strong></p><p><code>import static java.lang.System.*;</code> <code>java.lang.System</code>该类的成员都是static，则可以使用import static</p><ul><li><code>out.println();</code> =&gt; 表示System.out.println();</li></ul><hr><h3 id="_3-2-final" tabindex="-1"><a class="header-anchor" href="#_3-2-final"><span>3.2 final</span></a></h3><ol><li>final类：如果一个类被final修饰符所修饰和限定，说明这个类不能被继承，即不可能有子类。</li><li>final方法：final修饰符所修饰的方法，是不能被子类所覆盖的方法。</li><li>final字段及final局部变量(方法中的变量) <ul><li><strong>基础</strong><ul><li>它们的值一旦给定，就不能更改。</li><li>是只读量，它们能且只能被赋值一次，而不能被赋值多次。</li></ul></li><li><strong>一个字段被static final两个修饰符所限定时，它可以表示常量。</strong><ul><li>Integer. MAX_VALUE(表示最大整数)、Math.PI(表示圆周率)就是这种常量。</li></ul></li><li><strong>赋值</strong><ol><li>在定义static final域时，若不给定初始值，则按默认值进行初始化(数值为0，boolean型为false，引用型为null)。</li><li>在较新的Java语言中，static final修饰的字段必须赋初识值，不会有默认值。</li><li>在定义final字段时，若不是static的域，则必须且只能赋值一次，不能缺省。 <ul><li>这种域的赋值的方式有两种:一是在定义变量时赋初始值，二是在每一个构造函数中进行赋值。</li></ul></li><li>在定义final局部变量时，也必须且只能赋值一次。它的值可能不是常量，但它的取值在变量存在期间不会改变。</li></ol></li></ul></li></ol><hr><h3 id="_3-3-abstract" tabindex="-1"><a class="header-anchor" href="#_3-3-abstract"><span>3.3 abstract</span></a></h3><ol><li>abstract类：凡是用abstract修饰符修饰的类被称为抽象类。抽象类不能被实例化。 <ul><li>抽象类中可以包含抽象方法，也可以不包含abstract方法。但是，一旦某个类中包含了abstract方法，则这个类必须声明为abstract类。</li></ul></li><li>abstract方法：被abstract所修饰的方法叫抽象方法，抽象方法的作用在为所有子类定义一个统一的接口。对抽象方法只需声明，而不需实现，格式:<code>abstract returnType abstractMethod( [paramlist] );</code><ul><li>抽象方法在子类中必须被实现，否则子类仍然是abstract的。</li></ul></li></ol>`,30)]))}const r=s(e,[["render",n]]),p=JSON.parse('{"path":"/programmingJava/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%8C%97%E5%A4%A7/m6yq6uz2/","title":"控制符","lang":"zh-CN","frontmatter":{"title":"控制符","createTime":"2025/05/07 09:38:58","permalink":"/programmingJava/Java程序设计北大/m6yq6uz2/"},"headers":[],"readingTime":{"minutes":4.24,"words":1272},"git":{"updatedTime":1754301252000,"contributors":[{"name":"WillBetter","username":"WillBetter","email":"WillWillBetter@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/WillBetter?v=4","url":"https://github.com/WillBetter"}]},"filePathRelative":"notes/programming/Java/Java程序设计北大/4.类、包和接口/3.控制符.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"93b803","sort":10001,"name":"programming"},{"id":"ea3a17","sort":10004,"name":"Java"},{"id":"2ad0a4","sort":10005,"name":"Java程序设计北大"},{"id":"01dfb7","sort":4,"name":"类、包和接口"}]}');export{r as comp,p as data};
