import{_ as l,c as e,a,b as i,o as n}from"./app-CCZupzhC.js";const h={};function t(k,s){return n(),e("div",null,s[0]||(s[0]=[a('<p>程序的三种基本流程：</p><ul><li>顺序执行：从上到下顺序执行</li><li>分支执行：根据条件选择执行</li><li>循环执行：重复执行</li></ul><h2 id="java语句" tabindex="-1"><a class="header-anchor" href="#java语句"><span>Java语句</span></a></h2><ul><li>简单语句：方法调用语句；赋值语句，注意分号(😉</li><li>复合语句：由简单语句组成的语句块，由花括号{}包围</li></ul><h2 id="程序注释" tabindex="-1"><a class="header-anchor" href="#程序注释"><span>程序注释</span></a></h2><p>Java中可以采用三种注释方式:</p><ul><li>// 用于单行注释。注释从//开始，终止于行尾;</li><li>/* ... */ 用于多行注释。注释从/<em>开始，到</em>/结束，且这种注释不能 互相嵌套;</li><li>/** ... */ 是Java所特有的doc注释。它以/*<em>开始，到</em>/结束。 <blockquote><p>主要是为支持JDK工具javadoc而采用的。javadoc能识别注释中用标记@标识的一些特殊变量，并把doc注释加入它所生成的HTML文件。<code>javadoc HW.java</code></p></blockquote></li></ul><h2 id="分支语句" tabindex="-1"><a class="header-anchor" href="#分支语句"><span>分支语句</span></a></h2><ul><li><code>if(逻辑判断){语法块}else{语法块}</code></li><li><code>switch(表达式){case值1:语法块1;break;case值2:语法块2;break;default:语法块3;}</code><ul><li>变量类型是整数、字符、字符串(String)</li><li>case后面是常量，可合并。<code>case 1:case 2:case 3: 语法块;break;</code></li><li>注意 break的使用，跳出switch语句。</li></ul></li></ul><h2 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句"><span>循环语句</span></a></h2><p>循环语句功能：在循环条件满足的情况下，反复执行特定代码</p><p>循环的五个要素 </p><ul><li>初始化部分(init_statement)</li><li>循环条件部分(test_exp)</li><li>循环体部分(body_statement)</li><li>迭代部分(alter_statement)</li><li>结束后处理</li></ul><h3 id="_1-循环语句的三种写法" tabindex="-1"><a class="header-anchor" href="#_1-循环语句的三种写法"><span>1 循环语句的三种写法</span></a></h3>',14),i("ul",null,[i("li",{循环体部分:""},"for循环：for(初始化部分; 循环条件部分; 迭代部分)"),i("li",{循环体部分:""},"while循环：while(循环条件部分)"),i("li",null,"do...while循环：do{循环体部分}while(循环条件部分)")],-1),a(`<hr><h3 id="_2-goto语句及其弊端" tabindex="-1"><a class="header-anchor" href="#_2-goto语句及其弊端"><span>2 Goto语句及其弊端</span></a></h3><p>Java去掉了GOTO语句，Java中断循环的解决方式：</p><ul><li>break语句：终止某个语句块的执行。break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">label1</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    label2</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        label3</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> break</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> label2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>continue语句：用于跳过某个循环语句块的一次执行。出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环。<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">outer</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    inner</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> j</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">%</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">==</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">            //判断100内的质数(1和自身 除断)，不是质数直接到最外层继续循环</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">            continue</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> outer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,4)]))}const r=l(h,[["render",t]]),d=JSON.parse('{"path":"/programmingJava/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%8C%97%E5%A4%A7/igxqzmk0/","title":"流程控制语句","lang":"zh-CN","frontmatter":{"title":"流程控制语句","createTime":"2025/04/14 17:19:05","permalink":"/programmingJava/Java程序设计北大/igxqzmk0/"},"headers":[],"readingTime":{"minutes":2.12,"words":636},"git":{"updatedTime":1754301252000,"contributors":[{"name":"WillBetter","username":"WillBetter","email":"WillWillBetter@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/WillBetter?v=4","url":"https://github.com/WillBetter"}]},"filePathRelative":"notes/programming/Java/Java程序设计北大/3.数据运算-流控制-数组/3.流程控制语句.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"93b803","sort":10001,"name":"programming"},{"id":"ea3a17","sort":10004,"name":"Java"},{"id":"2ad0a4","sort":10005,"name":"Java程序设计北大"},{"id":"a84f38","sort":3,"name":"数据运算-流控制-数组"}]}');export{r as comp,d as data};
