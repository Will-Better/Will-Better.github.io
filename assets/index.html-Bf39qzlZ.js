import{_ as o,c as e,a as n,o as t}from"./app-CCZupzhC.js";const s={};function a(l,r){return t(),e("div",null,r[0]||(r[0]=[n('<h2 id="一-html与css" tabindex="-1"><a class="header-anchor" href="#一-html与css"><span><strong>一 HTML与CSS</strong></span></a></h2><h3 id="_1-html-1天" tabindex="-1"><a class="header-anchor" href="#_1-html-1天"><span>1 <strong>HTML</strong> 1天</span></a></h3><ul><li><strong>语义化标签</strong>：<code>&lt;header&gt;</code>, <code>&lt;article&gt;</code>（<strong>⭐ SEO/可访问性</strong>）</li><li><strong>SEO优化</strong>：<code>meta</code>标签、结构化数据（<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML" target="_blank" rel="noopener noreferrer">MDN HTML 参考</a>）</li><li><strong>Web Components</strong>：自定义元素、Shadow DOM（<a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components" target="_blank" rel="noopener noreferrer">Web Components 指南</a>） 、模板化</li><li><strong>表单与校验</strong>：<code>&lt;input&gt;</code>类型、HTML5表单验证、ARIA属性</li></ul><hr><h3 id="_2-css-1天" tabindex="-1"><a class="header-anchor" href="#_2-css-1天"><span>2 <strong>CSS</strong> 1天</span></a></h3><p><strong>盒模型</strong>：标准/怪异模式区别（<strong>⭐ 布局基础</strong>）</p><ul><li><strong>布局体系</strong>：Flexbox（<strong>⭐ 一维布局</strong>）、Grid（<strong>⭐ 二维布局</strong>）、定位</li><li><strong>响应式设计</strong>：媒体查询（<code>@media</code>）、视口单位（vw/vh）、移动优先原则（<strong>⭐ 多端适配核心</strong>）</li><li><strong>预处理器</strong>：Sass/Less变量、嵌套、混合</li><li><strong>动画与过渡</strong>：<code>transition</code>、<code>keyframes</code>、性能优化（<strong>⭐ GPU加速</strong>）</li><li><strong>Flexbox/Grid</strong>：一维/二维布局（<strong>⭐ 响应式设计核心</strong>）（<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener noreferrer">CSS-Tricks Flexbox Guide</a>）</li><li><strong>动画与过渡</strong>：<code>transition</code>、<code>keyframes</code>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations" target="_blank" rel="noopener noreferrer">MDN CSS 动画</a>）</li><li><strong>预处理器</strong>：Sass变量、嵌套（<a href="https://sass-lang.com/" target="_blank" rel="noopener noreferrer">Sass 官方文档</a>）</li></ul><h2 id="二-javascript" tabindex="-1"><a class="header-anchor" href="#二-javascript"><span>二 JavaScript</span></a></h2><h3 id="_1-语言基础-1天" tabindex="-1"><a class="header-anchor" href="#_1-语言基础-1天"><span>1. <strong>语言基础</strong> 1天</span></a></h3><ul><li><strong>作用域与闭包</strong>：词法作用域、闭包应用（<strong>⭐ 模块化基础</strong>）（《JavaScript 高级程序设计》）</li><li><strong>原型链</strong>：<code>prototype</code>、<code>__proto__</code>（<strong>⭐ 继承机制核心</strong>）（《You Don&#39;t Know JS: this &amp; Object Prototypes》）</li><li><strong>ES6+</strong>：<code>Promise</code>、<code>async/await</code>（<strong>⭐ 异步编程基石</strong>）（<a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener noreferrer">ES6 入门教程</a>）<br><strong>模块化</strong>：CommonJS、ES Modules、动态导入（<code>import()</code>）</li></ul><hr><h3 id="_2-浏览器机制-1天" tabindex="-1"><a class="header-anchor" href="#_2-浏览器机制-1天"><span>2. <strong>浏览器机制</strong> 1天</span></a></h3><ul><li><strong>事件循环</strong>：宏任务/微任务执行顺序（<strong>⭐ 异步原理</strong>）（<a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noopener noreferrer">Tasks, microtasks, queues and schedules</a>）</li><li><strong>DOM/BOM</strong>：节点操作、<code>window</code>对象（<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model" target="_blank" rel="noopener noreferrer">MDN DOM 文档</a>）<br><strong>BOM API</strong>：<code>window</code>、<code>location</code>、<code>history</code></li></ul><hr><h3 id="_3-高级特性-1天" tabindex="-1"><a class="header-anchor" href="#_3-高级特性-1天"><span>3. <strong>高级特性</strong> 1天</span></a></h3><ul><li><strong>设计模式</strong>：单例、观察者、发布订阅（<strong>⭐ 复杂应用架构</strong>）</li><li><strong>Web Workers</strong>：多线程计算（<strong>⭐ 性能密集型任务</strong>）</li><li><strong>垃圾回收</strong>：标记清除、内存泄漏排查</li></ul><h2 id="三、浏览器原理" tabindex="-1"><a class="header-anchor" href="#三、浏览器原理"><span><strong>三、浏览器原理</strong></span></a></h2><h3 id="_1-渲染机制-1天" tabindex="-1"><a class="header-anchor" href="#_1-渲染机制-1天"><span>1. <strong>渲染机制</strong> 1天</span></a></h3><ul><li><strong>关键渲染路径</strong>：解析→布局→绘制（<strong>⭐ 性能优化基础</strong>）（《浏览器工作原理与实践》）</li><li><strong>GPU加速</strong>：<code>transform</code>触发合成层（<a href="https://developer.chrome.com/blog/compositor/" target="_blank" rel="noopener noreferrer">Compositing in Blink</a>）</li><li><strong>关键渲染路径</strong>：HTML解析 → CSSOM构建 → 渲染树 → 布局 → 绘制（<strong>⭐ 性能优化核心</strong>）</li><li><strong>重排（Reflow）与重绘（Repaint）</strong>：触发条件（如DOM结构变化）、优化策略（减少布局抖动）</li><li><strong>GPU加速</strong>：<code>transform</code>/<code>opacity</code> 触发合成层（<strong>⭐ 动画性能优化关键</strong>）</li></ul><h3 id="_2-浏览器事件系统-1天" tabindex="-1"><a class="header-anchor" href="#_2-浏览器事件系统-1天"><span>2. <strong>浏览器事件系统</strong> 1天</span></a></h3><ul><li><strong>事件循环（Event Loop）</strong>：宏任务（<code>setTimeout</code>）、微任务（<code>Promise.then</code>）执行顺序（<strong>⭐ 异步编程基础</strong>）</li><li><strong>事件传播</strong>：捕获阶段、目标阶段、冒泡阶段（<strong>⭐ 事件委托实现原理</strong>）</li><li><strong>Web API</strong>：<code>fetch</code>、<code>requestAnimationFrame</code>、<code>IntersectionObserver</code>（<strong>⭐ 异步操作与性能优化</strong>）</li></ul><h3 id="_3-浏览器存储-1天" tabindex="-1"><a class="header-anchor" href="#_3-浏览器存储-1天"><span>3. <strong>浏览器存储</strong> 1天</span></a></h3><ul><li><strong>Cookie</strong>：同源策略、<code>SameSite</code>属性（<strong>⭐ 安全限制</strong>）</li><li><strong>Web Storage</strong>：<code>localStorage</code>（持久化）、<code>sessionStorage</code>（会话级）</li><li><strong>IndexedDB</strong>：事务操作、索引查询（<strong>⭐ 大规模结构化数据存储</strong>）</li></ul><h3 id="_4-浏览器安全-1天" tabindex="-1"><a class="header-anchor" href="#_4-浏览器安全-1天"><span>4. <strong>浏览器安全</strong> 1天</span></a></h3><ul><li><p><strong>同源策略（Same Origin Policy）</strong>：跨域解决方案（CORS、JSONP、代理）</p></li><li><p><strong>Content Security Policy（CSP）</strong>：防止XSS攻击（<strong>⭐ 安全防护核心</strong>）</p></li><li><p><strong>沙箱机制</strong>：<code>&lt;iframe&gt;</code>隔离、跨进程架构（如Chrome多进程模型）</p></li><li><p><strong>Cookie/Web Storage</strong>：同源策略、安全限制（<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API" target="_blank" rel="noopener noreferrer">MDN Web Storage</a>）</p></li><li><p><strong>CSP</strong>：防止XSS（<strong>⭐ 安全防护</strong>）（<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noopener noreferrer">Content Security Policy</a>）</p></li></ul><h2 id="四、node-js" tabindex="-1"><a class="header-anchor" href="#四、node-js"><span><strong>四、Node.js</strong></span></a></h2><h3 id="_1-核心模块-1天" tabindex="-1"><a class="header-anchor" href="#_1-核心模块-1天"><span>1. <strong>核心模块</strong> 1天</span></a></h3><ul><li><p><strong>事件循环（Node.js Event Loop）</strong>：阶段划分（Timers → I/O Callbacks → Idle → Poll → Close Callbacks）与优先级（<strong>⭐ 与浏览器事件循环差异</strong>）</p></li><li><p><strong>模块系统</strong>：CommonJS规范、<code>require</code>加载机制（<strong>⭐ 模块缓存与循环引用</strong>）</p></li><li><p><strong>文件操作</strong>：<code>fs</code>模块（同步/异步API）、流（Stream）处理（<strong>⭐ 大文件高效读写</strong>）</p></li><li><p><strong>事件循环</strong>：Timers→Poll→Check阶段（<strong>⭐ 异步I/O原理</strong>）（《Node.js 设计模式》）</p></li><li><p><strong>模块系统</strong>：CommonJS、<code>require</code>（<a href="https://nodejs.org/api/modules.html" target="_blank" rel="noopener noreferrer">Node.js Modules</a>）</p></li></ul><h3 id="_2-异步编程-1天" tabindex="-1"><a class="header-anchor" href="#_2-异步编程-1天"><span>2. <strong>异步编程</strong> 1天</span></a></h3><ul><li><strong>回调地狱</strong>：解决方案（Promise、<code>async/await</code>）（<strong>⭐ 代码可维护性</strong>）</li><li><strong>EventEmitter</strong>：事件发布订阅模式（<code>on</code>/<code>emit</code>）（<strong>⭐ 核心通信机制</strong>）</li><li><strong>Cluster模块</strong>：多进程负载均衡（<strong>⭐ 高并发场景优化</strong>）</li></ul><h3 id="_3-网络与框架-1天" tabindex="-1"><a class="header-anchor" href="#_3-网络与框架-1天"><span>3. <strong>网络与框架</strong> 1天</span></a></h3><ul><li><strong>HTTP模块</strong>：创建服务器、处理请求/响应（<strong>⭐ 底层网络交互</strong>）</li><li><strong>Express/Koa</strong>：中间件机制（洋葱模型）、路由设计（<strong>⭐ 快速开发框架</strong>）</li><li><strong>NestJS</strong>：依赖注入、TypeScript支持（<strong>⭐ 企业级框架</strong>）</li><li><strong>Express/Koa</strong>：中间件、洋葱模型（<a href="https://expressjs.com/" target="_blank" rel="noopener noreferrer">Express 文档</a>）</li></ul><h3 id="_4-性能与调试-1天" tabindex="-1"><a class="header-anchor" href="#_4-性能与调试-1天"><span>4. <strong>性能与调试</strong> 1天</span></a></h3><ul><li><strong>内存管理</strong>：堆内存分析（<code>--inspect</code>）、内存泄漏排查（<strong>⭐ V8引擎限制</strong>）</li><li><strong>性能监控</strong>：<code>process.memoryUsage()</code>、APM工具（New Relic）</li><li><strong>调试工具</strong>：Chrome DevTools、VS Code调试器（<strong>⭐ 断点与性能分析</strong>）</li><li><strong>内存管理</strong>：堆快照分析（<strong>⭐ 泄漏排查</strong>）（<a href="https://nodejs.org/en/docs/guides/debugging-getting-started/" target="_blank" rel="noopener noreferrer">Node.js 调试指南</a>）</li></ul><h3 id="_5-生态工具-1天" tabindex="-1"><a class="header-anchor" href="#_5-生态工具-1天"><span>5. <strong>生态工具</strong> 1天</span></a></h3><ul><li><strong>NPM包开发</strong>：模块发布、私有仓库搭建（Verdaccio）</li><li><strong>TypeScript集成</strong>：类型声明文件（<code>.d.ts</code>）、装饰器（<strong>⭐ 企业级项目标配</strong>）</li><li><strong>Docker部署</strong>：容器化打包、镜像优化（<strong>⭐ 云原生支持</strong>）</li></ul><h3 id="重点关联说明" tabindex="-1"><a class="header-anchor" href="#重点关联说明"><span><strong>重点关联说明</strong></span></a></h3><ol><li><p><strong>浏览器与Node.js的异同</strong>：</p><ul><li><strong>事件循环差异</strong>：Node.js没有DOM渲染阶段，但有<code>setImmediate</code>和<code>process.nextTick</code>。</li><li><strong>全局对象</strong>：浏览器中为<code>window</code>，Node.js中为<code>global</code>。</li><li><strong>模块系统</strong>：浏览器使用ES Modules，Node.js默认使用CommonJS。</li></ul></li><li><p><strong>性能优化关联</strong>：</p><ul><li>浏览器侧重渲染性能（减少重排/重绘），Node.js侧重I/O吞吐和内存管理。</li><li>两者均需关注事件循环机制，避免阻塞主线程。</li></ul></li><li><p><strong>全栈能力扩展</strong>：</p><ul><li>通过Node.js可实现<strong>BFF（Backend For Frontend）层</strong>，聚合接口、SSR渲染等。</li><li>工具链开发（如Webpack插件）依赖Node.js文件操作和进程管理能力。</li></ul></li></ol><hr><h3 id="学习建议" tabindex="-1"><a class="header-anchor" href="#学习建议"><span><strong>学习建议</strong></span></a></h3><ul><li><strong>浏览器原理</strong>：通过Chrome DevTools的Performance面板分析页面加载过程，理解关键渲染路径。</li><li><strong>Node.js</strong>：从Express/Koa入手实现RESTful API，再深入Cluster/Stream等高级特性。</li><li><strong>关联实践</strong>：用Node.js搭建SSR服务（如Next.js），结合浏览器缓存策略优化首屏性能。</li></ul><h2 id="五、网络与性能优化" tabindex="-1"><a class="header-anchor" href="#五、网络与性能优化"><span><strong>五、网络与性能优化</strong></span></a></h2><h3 id="_1-http-https-2天" tabindex="-1"><a class="header-anchor" href="#_1-http-https-2天"><span>1. <strong>HTTP/HTTPS</strong> 2天</span></a></h3><ul><li><p><strong>缓存策略</strong>：强缓存（<code>Cache-Control</code>）、协商缓存（<code>ETag</code>）（<strong>⭐ 性能核心</strong>）（《HTTP 权威指南》）</p></li><li><p><strong>安全机制</strong>：CORS、JWT鉴权（<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS" target="_blank" rel="noopener noreferrer">MDN CORS</a>）</p></li><li><p><strong>协议基础</strong>：请求方法（GET/POST）、状态码（<strong>⭐ 缓存相关如304</strong>）</p></li><li><p><strong>缓存策略</strong>：强缓存（<code>Cache-Control</code>）、协商缓存（<code>ETag</code>/<code>Last-Modified</code>）（<strong>⭐ 性能优化核心</strong>）</p></li><li><p><strong>安全机制</strong>：HTTPS、CORS、CSRF Token</p></li><li><p><strong>协议基础</strong>：请求方法（GET/POST）、状态码（<strong>⭐ 缓存相关如304</strong>）</p></li><li><p><strong>缓存策略</strong>：强缓存（<code>Cache-Control</code>）、协商缓存（<code>ETag</code>/<code>Last-Modified</code>）（<strong>⭐ 性能优化核心</strong>）</p></li><li><p><strong>安全机制</strong>：HTTPS、CORS、CSRF Token</p></li></ul><h3 id="_2-性能优化-2天" tabindex="-1"><a class="header-anchor" href="#_2-性能优化-2天"><span>2. <strong>性能优化</strong> 2天</span></a></h3><ul><li><p><strong>代码分割</strong>：动态<code>import()</code>（<a href="https://webpack.docschina.org/guides/code-splitting/" target="_blank" rel="noopener noreferrer">Webpack Code Splitting</a>）</p></li><li><p><strong>渲染优化</strong>：减少重排/重绘（<a href="https://developers.google.com/web/fundamentals/performance/rendering" target="_blank" rel="noopener noreferrer">渲染性能指南</a>）</p></li><li><p><strong>加载优化</strong>：代码分割（Code Splitting）、预加载（<code>preload</code>）、CDN加速</p></li><li><p><strong>渲染优化</strong>：减少重排重绘、Intersection Observer（<strong>⭐ 懒加载实现</strong>）</p></li><li><p><strong>性能监控</strong>：Lighthouse、Chrome DevTools性能面板</p></li><li><p><strong>加载优化</strong>：代码分割（Code Splitting）、预加载（<code>preload</code>）、CDN加速</p></li><li><p><strong>渲染优化</strong>：减少重排重绘、Intersection Observer（<strong>⭐ 懒加载实现</strong>）</p></li><li><p><strong>性能监控</strong>：Lighthouse、Chrome DevTools性能面板</p></li></ul><h2 id="六-通用编程知识" tabindex="-1"><a class="header-anchor" href="#六-通用编程知识"><span><strong>六 通用编程知识</strong></span></a></h2><h3 id="_1-算法与数据结构-2天" tabindex="-1"><a class="header-anchor" href="#_1-算法与数据结构-2天"><span>1. <strong>算法与数据结构</strong> 2天</span></a></h3><h3 id="_2-计算机通用知识-1天" tabindex="-1"><a class="header-anchor" href="#_2-计算机通用知识-1天"><span>2. <strong>计算机通用知识</strong> 1天</span></a></h3><h2 id="七-框架与库" tabindex="-1"><a class="header-anchor" href="#七-框架与库"><span><strong>七 框架与库</strong></span></a></h2><h3 id="_1-vue-1周" tabindex="-1"><a class="header-anchor" href="#_1-vue-1周"><span>1. <strong>Vue</strong> 1周</span></a></h3><ul><li><p><strong>响应式原理</strong>：Proxy（<strong>⭐ Vue3 核心</strong>）（<a href="https://vuejs.org/guide/extras/reactivity-in-depth.html" target="_blank" rel="noopener noreferrer">Vue 3 响应式原理</a>）</p></li><li><p><strong>组合式API</strong>：<code>setup()</code>、<code>ref</code>（<a href="https://vuejs.org/guide/introduction.html" target="_blank" rel="noopener noreferrer">Vue 3 文档</a>）</p></li><li><p><strong>响应式原理</strong>：<code>Object.defineProperty</code> vs Proxy（<strong>⭐ Vue2/Vue3差异</strong>）</p></li><li><p><strong>组合式API</strong>：<code>setup()</code>、<code>ref</code>、<code>reactive</code>（<strong>⭐ Vue3核心</strong>）</p></li><li><p><strong>状态管理</strong>：Vuex/Pinia（轻量化替代）</p></li><li><p><strong>工具链</strong>：Vue Router、Vite（<strong>⭐ 极速构建</strong>）</p></li></ul><hr><h3 id="_2-react-4天-初步-了解" tabindex="-1"><a class="header-anchor" href="#_2-react-4天-初步-了解"><span>2. <strong>React</strong> 4天 =&gt; 初步 了解</span></a></h3><ul><li><strong>Hooks</strong>：<code>useState</code>、<code>useEffect</code>（<strong>⭐ 函数式组件范式</strong>）（<a href="https://react.dev/" target="_blank" rel="noopener noreferrer">React 官方文档</a>）</li><li><strong>状态管理</strong>：Redux、Context API（《React 状态管理与同构实战》）</li><li><strong>性能优化</strong>：<code>memo</code>、虚拟DOM Diff（<strong>⭐ 渲染效率</strong>）（<a href="https://react.dev/reference/react/memo" target="_blank" rel="noopener noreferrer">React 优化指南</a>）</li><li><strong>核心概念</strong>：JSX、组件生命周期（类组件）、Hooks（<code>useState</code>, <code>useEffect</code>）（<strong>⭐ 函数式组件范式</strong>）</li><li><strong>状态管理</strong>：Redux（单向数据流）、Context API、Recoil</li><li><strong>性能优化</strong>：<code>memo</code>、<code>useCallback</code>、虚拟DOM Diff算法（<strong>⭐ 高效渲染关键</strong>）</li><li><strong>生态工具</strong>：React Router、Next.js（SSR）、React Query（数据请求）</li></ul><hr><h3 id="_3-其他框架-3天-初步-了解" tabindex="-1"><a class="header-anchor" href="#_3-其他框架-3天-初步-了解"><span>3. <strong>其他框架</strong> 3天 =&gt; 初步 了解</span></a></h3><ul><li><p><strong>Angular</strong>：依赖注入、RxJS（<a href="https://angular.io/docs" target="_blank" rel="noopener noreferrer">Angular 官方指南</a>）</p></li><li><p><strong>Svelte</strong>：编译时框架（<a href="https://svelte.dev/" target="_blank" rel="noopener noreferrer">Svelte 官网</a>）</p></li><li><p>Angular：依赖注入、RxJS集成、TypeScript深度支持</p></li><li><p>Svelte：编译时框架（<strong>⭐ 无虚拟DOM</strong>）</p></li></ul><h2 id="八、前端工程化" tabindex="-1"><a class="header-anchor" href="#八、前端工程化"><span><strong>八、前端工程化</strong></span></a></h2><h3 id="_1-构建工具-1天" tabindex="-1"><a class="header-anchor" href="#_1-构建工具-1天"><span>1. <strong>构建工具</strong> 1天</span></a></h3><ul><li><strong>Webpack</strong>：Loader/Plugin机制（<strong>⭐ 打包核心</strong>）（<a href="https://webpack.docschina.org/" target="_blank" rel="noopener noreferrer">Webpack 中文文档</a>）</li><li><strong>Vite</strong>：ESM按需编译（<a href="https://vitejs.dev/" target="_blank" rel="noopener noreferrer">Vite 官网</a>）</li><li><strong>Webpack</strong>：Loader（处理资源）、Plugin（扩展功能）、Tree Shaking（<strong>⭐ 代码精简</strong>）</li><li><strong>Vite</strong>：基于ESM的按需编译（<strong>⭐ 开发速度优势</strong>）</li><li><strong>Babel</strong>：语法降级、Polyfill注入</li></ul><h3 id="_1-构建与编译-2天" tabindex="-1"><a class="header-anchor" href="#_1-构建与编译-2天"><span>1. <strong>构建与编译</strong> 2天</span></a></h3><ul><li><strong>Webpack 高级配置</strong>： <ul><li><strong>Tree Shaking</strong>：基于ESM的Dead Code消除（<strong>⭐ 减少打包体积</strong>）</li><li><strong>模块联邦（Module Federation）</strong>：微前端资源共享（<strong>⭐ 跨项目复用模块</strong>）</li><li><strong>持久化缓存</strong>：<code>cache</code>配置（<strong>⭐ 加速二次构建</strong>）</li></ul></li><li><strong>Vite 核心原理</strong>：基于ESM的按需编译、预构建依赖（<strong>⭐ 开发环境极速启动</strong>）</li><li><strong>Babel 插件开发</strong>：AST操作、自定义语法转换（<strong>⭐ 扩展语言能力</strong>）</li></ul><h3 id="_2-模块化与依赖-2天" tabindex="-1"><a class="header-anchor" href="#_2-模块化与依赖-2天"><span>2. <strong>模块化与依赖</strong> 2天</span></a></h3><ul><li><strong>ES Modules vs CommonJS</strong>：静态分析 vs 动态加载（<strong>⭐ Tree Shaking 兼容性</strong>）</li><li><strong>Monorepo 管理</strong>：Lerna、Nx、Turborepo（<strong>⭐ 多包协作与任务编排</strong>）</li><li><strong>依赖分析</strong>：<code>webpack-bundle-analyzer</code>（<strong>⭐ 定位体积瓶颈</strong>）</li></ul><h3 id="_3-代码质量与协作-2天" tabindex="-1"><a class="header-anchor" href="#_3-代码质量与协作-2天"><span>3. <strong>代码质量与协作</strong> 2天</span></a></h3><ul><li><p><strong>Git Hooks</strong>：<code>husky</code> + <code>lint-staged</code>（<strong>⭐ 提交前自动检查</strong>）</p></li><li><p><strong>CI/CD 流水线</strong>：GitHub Actions、Jenkins（<strong>⭐ 自动化构建部署</strong>）</p></li><li><p><strong>Changelog 管理</strong>：语义化版本（SemVer）、<code>standard-version</code>（<strong>⭐ 规范版本日志</strong>）</p></li><li><p><strong>TypeScript</strong>：类型系统、泛型（<strong>⭐ 大型项目必备</strong>）（<a href="https://www.typescriptlang.org/docs/" target="_blank" rel="noopener noreferrer">TypeScript 手册</a>）</p></li><li><p><strong>ESLint/Prettier</strong>：代码规范（<a href="https://eslint.org/docs/rules/" target="_blank" rel="noopener noreferrer">ESLint 规则</a>）<br> ESLint/Prettier：代码规范、自动格式化</p></li></ul><h3 id="_4-包管理-2天" tabindex="-1"><a class="header-anchor" href="#_4-包管理-2天"><span>4. <strong>包管理</strong> 2天</span></a></h3><ul><li><strong>npm/yarn/pnpm</strong>：依赖解析、锁文件机制（<code>package-lock.json</code>）、workspaces（<strong>⭐ 多包管理</strong>）</li></ul><hr><h2 id="九、知识点整合" tabindex="-1"><a class="header-anchor" href="#九、知识点整合"><span><strong>九、知识点整合</strong></span></a></h2><h3 id="_1-前端性能优化-⭐-用户体验核心-3天" tabindex="-1"><a class="header-anchor" href="#_1-前端性能优化-⭐-用户体验核心-3天"><span>1. <strong>前端性能优化</strong>（<strong>⭐ 用户体验核心</strong>） 3天</span></a></h3><h4 id="_1-加载优化" tabindex="-1"><a class="header-anchor" href="#_1-加载优化"><span>1. <strong>加载优化</strong></span></a></h4><ul><li><strong>资源压缩</strong>：Brotli/Gzip压缩、图片格式（WebP/AVIF）（<strong>⭐ 减少传输体积</strong>）</li><li><strong>预加载与懒加载</strong>： <ul><li><code>&lt;link rel=&quot;preload&quot;&gt;</code>（<strong>⭐ 关键资源提前加载</strong>）</li><li>动态<code>import()</code>（<strong>⭐ 按需加载代码</strong>）</li></ul></li><li><strong>HTTP/2 优化</strong>：多路复用、Server Push（<strong>⭐ 减少连接数</strong>）</li></ul><h4 id="_2-渲染优化" tabindex="-1"><a class="header-anchor" href="#_2-渲染优化"><span>2. <strong>渲染优化</strong></span></a></h4><ul><li><strong>GPU 加速</strong>：<code>transform</code>/<code>opacity</code>触发合成层（<strong>⭐ 避免重排</strong>）</li><li><strong>离屏渲染</strong>：<code>Canvas</code>预绘制、<code>will-change</code>提示（<strong>⭐ 减少主线程压力</strong>）</li><li><strong>虚拟列表</strong>：<code>react-window</code>/<code>vue-virtual-scroller</code>（<strong>⭐ 大数据量滚动性能</strong>）</li></ul><h4 id="_3-运行时优化" tabindex="-1"><a class="header-anchor" href="#_3-运行时优化"><span>3. <strong>运行时优化</strong></span></a></h4><ul><li><strong>内存泄漏排查</strong>：Chrome Memory面板、堆快照对比</li><li><strong>防抖与节流</strong>：<code>lodash.debounce</code>/<code>lodash.throttle</code>（<strong>⭐ 高频事件优化</strong>）</li><li><strong>Web Workers</strong>：复杂计算分流（<strong>⭐ 避免阻塞主线程</strong>）</li></ul><h4 id="_4-核心关联与实践-打包优化" tabindex="-1"><a class="header-anchor" href="#_4-核心关联与实践-打包优化"><span>4. <strong>核心关联与实践</strong> ，打包优化</span></a></h4><ol><li><strong>工程化与性能优化结合</strong>： <ul><li>通过Webpack的代码分割（Code Splitting）减少首屏体积，结合预加载提升体验。</li><li>利用CI/CD自动化部署Lighthouse检测，生成性能报告。</li></ul></li></ol><h3 id="_2-安全防护整合" tabindex="-1"><a class="header-anchor" href="#_2-安全防护整合"><span>2.安全防护整合</span></a></h3><h2 id="十、跨端开发" tabindex="-1"><a class="header-anchor" href="#十、跨端开发"><span><strong>十、跨端开发</strong></span></a></h2><h3 id="_1-小程序-1周" tabindex="-1"><a class="header-anchor" href="#_1-小程序-1周"><span>1. <strong>小程序</strong> 1周</span></a></h3><ul><li><strong>双线程模型</strong>：逻辑层与视图层通信（<strong>⭐ <code>setData</code>优化</strong>）（<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener noreferrer">微信小程序文档</a>）</li><li><strong>云开发</strong>：数据库、云函数（<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html" target="_blank" rel="noopener noreferrer">微信云开发</a>）</li><li><strong>架构差异</strong>： <ul><li>双线程模型：逻辑层（JavaScript）与视图层（WebView）分离（<strong>⭐ 通信机制依赖 <code>setData</code></strong>）</li><li>无DOM操作：通过数据驱动视图（类似Vue/React）</li></ul></li><li><strong>核心能力</strong>： <ul><li><strong>组件库</strong>：内置组件（<code>swiper</code>、<code>scroll-view</code>）、自定义组件（<strong>⭐ 复用与封装</strong>）</li><li><strong>API体系</strong>：设备API（摄像头、定位）、支付API、云开发（<strong>⭐ 免服务器后端能力</strong>）</li><li><strong>性能优化</strong>：分包加载、减少<code>setData</code>数据量、骨架屏（<strong>⭐ 启动速度优化</strong>）</li></ul></li><li><strong>开发工具</strong>： <ul><li>微信开发者工具：模拟器、真机调试、云函数本地测试</li><li>Taro：React/Vue语法转小程序（<strong>⭐ 多端统一开发</strong>）</li></ul></li></ul><h3 id="_2-uni-app-1周" tabindex="-1"><a class="header-anchor" href="#_2-uni-app-1周"><span>2. <strong>uni-app</strong> 1周</span></a></h3><ul><li><p><strong>核心特性</strong>：</p><ul><li>基于Vue语法：支持Vue2/Vue3（<strong>⭐ 学习成本低</strong>）</li><li>条件编译：通过注释实现多平台代码适配（<strong>⭐ 兼容H5/小程序/App</strong>）</li><li>原生渲染：App端使用WebView或原生渲染（如nvue）</li></ul></li><li><p><strong>生态工具</strong>：</p><ul><li>uni-ui：跨端UI组件库（<strong>⭐ 统一多端样式</strong>）</li><li>uniCloud：Serverless云服务（数据库、云函数）</li></ul></li><li><p><strong>性能优化</strong>：</p><ul><li>虚拟列表（<code>&lt;unicloud-db&gt;</code>）、图片懒加载、V3编译模式（<strong>⭐ 提升App端性能</strong>）</li></ul></li><li><p><strong>条件编译</strong>：多端代码适配（<a href="https://uniapp.dcloud.net.cn/" target="_blank" rel="noopener noreferrer">uni-app 文档</a>）</p></li><li><p><strong>原生渲染</strong>：<code>nvue</code>性能优化（<strong>⭐ App端优化</strong>）</p></li></ul><h3 id="_3-flutter-react-native-一周初步了解" tabindex="-1"><a class="header-anchor" href="#_3-flutter-react-native-一周初步了解"><span>3. <strong>Flutter/React Native</strong> 一周初步了解</span></a></h3><ul><li><p>Flutter：Dart语言、Skia引擎（<strong>⭐ 高性能跨端渲染</strong>）</p></li><li><p>React Native：Flex布局、原生模块桥接（<strong>⭐ 动态更新能力</strong>）</p></li><li><p><strong>渲染引擎</strong>：Skia vs 原生组件（<a href="https://flutter.dev/docs/resources/architectural-overview" target="_blank" rel="noopener noreferrer">Flutter 架构</a>）</p></li><li><p><strong>React Native</strong>：Bridge通信机制、原生模块开发</p></li><li><p><strong>Flutter</strong>：Widget树、Skia渲染引擎（<strong>⭐ 高性能跨平台</strong>）</p></li><li><p><strong>Electron</strong>：主进程与渲染进程、Node.js集成</p></li></ul><h2 id="十一、前端监控与安全" tabindex="-1"><a class="header-anchor" href="#十一、前端监控与安全"><span><strong>十一、前端监控与安全</strong></span></a></h2><h3 id="_1-监控系统-3天" tabindex="-1"><a class="header-anchor" href="#_1-监控系统-3天"><span>1. <strong>监控系统</strong> 3天</span></a></h3><ul><li><p><strong>错误监控</strong>：Source Map解析（<strong>⭐ 生产环境定位</strong>）（<a href="https://docs.sentry.io/" target="_blank" rel="noopener noreferrer">Sentry 文档</a>）</p></li><li><p><strong>性能指标</strong>：LCP/CLS（<a href="https://web.dev/vitals/" target="_blank" rel="noopener noreferrer">Web Vitals</a>）</p></li><li><p><strong>错误监控</strong>：</p><ul><li>全局捕获：<code>window.onerror</code>、<code>unhandledrejection</code>（<strong>⭐ JS异常/Promise拒绝</strong>）</li><li>源码定位：Source Map解析（<strong>⭐ 生产环境错误映射</strong>）</li></ul></li><li><p><strong>性能监控</strong>：</p><ul><li><strong>核心指标</strong>：FP/FCP/LCP/CLS（<strong>⭐ Web Vitals 标准</strong>）</li><li><strong>性能埋点</strong>：<code>Performance API</code>（资源加载耗时、长任务统计）</li></ul></li><li><p><strong>用户行为追踪</strong>：点击流、PV/UV统计（<strong>⭐ 漏斗分析基础</strong>）</p></li></ul><h3 id="_2-上报策略" tabindex="-1"><a class="header-anchor" href="#_2-上报策略"><span>2. <strong>上报策略</strong></span></a></h3><ul><li><strong>节流与采样</strong>：控制上报频率（<strong>⭐ 避免数据洪峰</strong>）</li><li><strong>离线缓存</strong>：<code>IndexedDB</code>存储失败请求，网络恢复后重传</li><li><strong>优先传输</strong>：<code>navigator.sendBeacon</code>（<strong>⭐ 页面关闭时可靠上报</strong>）</li></ul><h3 id="_3-可视化与告警" tabindex="-1"><a class="header-anchor" href="#_3-可视化与告警"><span>3. <strong>可视化与告警</strong></span></a></h3><ul><li><strong>可视化工具</strong>：Grafana、Kibana（<strong>⭐ 数据仪表盘</strong>）</li><li><strong>告警机制</strong>：阈值触发（如API错误率 &gt; 1%）、钉钉/邮件通知</li><li><strong>日志分析</strong>：ELK（Elasticsearch + Logstash + Kibana）聚合查询</li></ul><hr><ol start="2"><li><strong>监控驱动优化</strong>： <ul><li>根据监控数据中的高错误率接口，针对性优化API响应速度。</li><li>分析用户行为路径，优化关键页面的CLS（累积布局偏移）指标。</li></ul></li></ol><h2 id="十二、开发提效" tabindex="-1"><a class="header-anchor" href="#十二、开发提效"><span><strong>十二、开发提效</strong></span></a></h2><h3 id="_1-低代码-工具链-2天" tabindex="-1"><a class="header-anchor" href="#_1-低代码-工具链-2天"><span>1. <strong>低代码/工具链</strong> 2天</span></a></h3><ul><li><p><strong>脚手架</strong>：<code>create-react-app</code>（<a href="https://create-react-app.dev/" target="_blank" rel="noopener noreferrer">CRA 文档</a>）</p></li><li><p><strong>微前端</strong>：qiankun/Module Federation（<a href="https://qiankun.umijs.org/" target="_blank" rel="noopener noreferrer">qiankun 文档</a>）</p></li><li><p><strong>可视化搭建</strong>：拖拽生成页面（如阿里云凤蝶、H5-Dooring）</p></li><li><p><strong>DSL 设计</strong>：JSON Schema驱动UI（<strong>⭐ 动态渲染引擎</strong>）</p></li><li><p><strong>代码生成器</strong>：根据模板生成CRUD代码（<strong>⭐ 减少重复劳动</strong>）</p></li></ul><h3 id="_2-工具链优化" tabindex="-1"><a class="header-anchor" href="#_2-工具链优化"><span>2. <strong>工具链优化</strong></span></a></h3><ul><li><strong>脚手架</strong>：<code>create-react-app</code>/<code>Vite</code>预设模板（<strong>⭐ 快速初始化项目</strong>）</li><li><strong>自动化工具</strong>： <ul><li><code>Plop</code>：文件模板生成</li><li><code>Mock.js</code>：接口数据模拟（<strong>⭐ 前后端并行开发</strong>）</li></ul></li><li><strong>组件库共建</strong>：Storybook（<strong>⭐ 可视化组件文档与测试</strong>）</li></ul><h3 id="_3-微前端架构-2天" tabindex="-1"><a class="header-anchor" href="#_3-微前端架构-2天"><span>3. <strong>微前端架构</strong> 2天</span></a></h3><ul><li><strong>qiankun</strong>：子应用隔离、通信机制（<strong>⭐ 大型应用解耦</strong>）</li><li><strong>Module Federation</strong>：Webpack 5原生微前端方案（<strong>⭐ 依赖共享</strong>）</li><li><strong>Single-SPA</strong>：路由劫持、应用生命周期管理</li></ul><h3 id="_4-自动化测试-2天" tabindex="-1"><a class="header-anchor" href="#_4-自动化测试-2天"><span>4. <strong>自动化测试</strong> 2天</span></a></h3><ul><li><strong>单元测试</strong>：Jest、React Testing Library（<a href="https://jestjs.io/docs/getting-started" target="_blank" rel="noopener noreferrer">Jest 指南</a>）</li><li><strong>E2E测试</strong>：Cypress（<a href="https://docs.cypress.io/" target="_blank" rel="noopener noreferrer">Cypress 文档</a>）</li></ul><hr><ol start="3"><li><strong>提效工具闭环</strong>： <ul><li>脚手架初始化项目 → 低代码平台生成页面 → 组件库复用 → 监控系统保障线上质量。</li></ul></li></ol><hr><h3 id="学习建议-1" tabindex="-1"><a class="header-anchor" href="#学习建议-1"><span><strong>学习建议</strong></span></a></h3><ol><li><strong>工程化</strong>：从配置Webpack/Vite开始，逐步实现自定义Loader/Plugin，理解构建流程。</li><li><strong>监控系统</strong>：接入Sentry或自研SDK，结合真实业务数据优化报警规则。</li><li><strong>性能优化</strong>：使用Lighthouse评分指导优化，对比优化前后的Performance面板数据。</li><li><strong>提效实践</strong>：在团队中推广组件库、沉淀工具脚本，建立标准化开发流程。</li></ol><h2 id="十三、图形与可视化" tabindex="-1"><a class="header-anchor" href="#十三、图形与可视化"><span><strong>十三、图形与可视化</strong></span></a></h2><h3 id="_1-three-js-2周-初步学习-总结" tabindex="-1"><a class="header-anchor" href="#_1-three-js-2周-初步学习-总结"><span>1. <strong>Three.js</strong> 2周 初步学习-总结</span></a></h3><ul><li><strong>核心概念</strong>： <ul><li><strong>场景（Scene）</strong>：3D对象容器（<strong>⭐ 根容器</strong>）</li><li><strong>相机（Camera）</strong>：透视相机（<code>PerspectiveCamera</code>） vs 正交相机（<code>OrthographicCamera</code>）</li><li><strong>渲染器（Renderer）</strong>：WebGLRenderer（<strong>⭐ 核心渲染引擎</strong>）</li><li><strong>几何体与材质</strong>：<code>BoxGeometry</code>、<code>MeshBasicMaterial</code>（<strong>⭐ 物体外观定义</strong>）</li></ul></li><li><strong>动画与交互</strong>： <ul><li><code>requestAnimationFrame</code>循环更新（<strong>⭐ 平滑动画关键</strong>）</li><li>光线投射（<code>Raycaster</code>）：实现3D对象点击检测（<strong>⭐ 交互基础</strong>）</li></ul></li><li><strong>性能优化</strong>： <ul><li>合并几何体（<code>BufferGeometryUtils.mergeBufferGeometries</code>）</li><li>LOD（Level of Detail）：根据距离切换模型细节（<strong>⭐ 减少渲染负载</strong>）</li></ul></li><li><strong>扩展应用</strong>： <ul><li><strong>3D模型加载</strong>：GLTF格式（<strong>⭐ 行业标准</strong>）、<code>GLTFLoader</code></li><li><strong>物理引擎</strong>：Cannon.js、Ammo.js（碰撞检测、重力模拟）</li></ul></li><li><strong>核心概念</strong>：Scene、Camera、Renderer（<strong>⭐ 3D场景基础</strong>）（<a href="https://threejs.org/docs/" target="_blank" rel="noopener noreferrer">Three.js 官方教程</a>）</li><li><strong>模型加载</strong>：GLTF格式（<a href="https://www.khronos.org/gltf/" target="_blank" rel="noopener noreferrer">GLTF 规范</a>）</li></ul><h3 id="_2-2d可视化-1周-初步学习-总结" tabindex="-1"><a class="header-anchor" href="#_2-2d可视化-1周-初步学习-总结"><span>2. <strong>2D可视化</strong> 1周 初步学习-总结</span></a></h3><ul><li><strong>D3.js</strong>：数据驱动DOM（<a href="https://d3js.org/" target="_blank" rel="noopener noreferrer">D3 文档</a>）</li><li><strong>ECharts</strong>：配置化图表（<a href="https://echarts.apache.org/examples/" target="_blank" rel="noopener noreferrer">ECharts 示例</a>）<br><strong>Canvas/SVG</strong>：底层绘图技术（<strong>⭐ 高性能动画基础</strong>）</li></ul><hr><h3 id="关联说明" tabindex="-1"><a class="header-anchor" href="#关联说明"><span><strong>关联说明</strong></span></a></h3><ol><li><p><strong>小程序与uni-app对比</strong>：</p><ul><li><strong>定位差异</strong>：小程序专注轻量级场景，uni-app覆盖更广（H5/App/小程序）。</li><li><strong>开发效率</strong>：uni-app通过条件编译减少重复代码，但复杂App仍需原生优化。</li><li><strong>性能瓶颈</strong>：小程序双线程通信有延迟，uni-App端需权衡WebView与原生渲染。</li></ul></li><li><p><strong>Three.js与游戏引擎</strong>：</p><ul><li>Three.js更轻量，适合简单3D场景；复杂游戏可转向Babylon.js或Unity WebGL。</li><li>与WebGPU结合：未来高性能图形方向（<strong>⭐ 替代WebGL</strong>）。</li></ul></li><li><p><strong>跨端开发选型建议</strong>：</p><ul><li><strong>快速上线</strong>：uni-app（Vue生态）、Taro（React生态）</li><li><strong>高性能需求</strong>：Flutter（渲染一致性）、原生+WebView混合</li></ul></li></ol><hr><h4 id="学习建议-2" tabindex="-1"><a class="header-anchor" href="#学习建议-2"><span><strong>学习建议</strong></span></a></h4><ol><li><p><strong>小程序开发</strong>：</p><ul><li>从微信小程序入手，掌握<code>wxml</code>/<code>wxss</code>语法，理解<code>setData</code>通信机制。</li><li>实践云开发能力（如数据库CRUD），实现免后端应用。</li></ul></li><li><p><strong>uni-app进阶</strong>：</p><ul><li>尝试多端编译（同一代码发布H5+小程序+App），处理平台差异。</li><li>学习使用<code>uniCloud</code>实现全栈功能（如用户系统、文件上传）。</li></ul></li><li><p><strong>Three.js实战</strong>：</p><ul><li>从简单场景搭建开始（立方体+光源+相机控制），逐步添加纹理和动画。</li><li>结合Blender导出GLTF模型，实现复杂3D场景交互。</li></ul></li><li><p><strong>性能调优</strong>：</p><ul><li>小程序使用<code>&lt;scroll-view&gt;</code>优化长列表，Three.js通过FPS监控工具（<code>stats.js</code>）分析渲染性能。</li></ul></li></ol><hr><h2 id="十四、前沿与扩展" tabindex="-1"><a class="header-anchor" href="#十四、前沿与扩展"><span><strong>十四、前沿与扩展</strong></span></a></h2><ul><li><strong>WebAssembly</strong>：C++/Rust编译为.wasm（<strong>⭐ 高性能计算</strong>）</li><li><strong>PWA</strong>：Service Worker（<strong>⭐ 离线可用</strong>）、Manifest文件</li></ul><p>通过掌握这些模块，可系统性提升工程交付效率、保障线上稳定性，并深入理解前端全链路技术栈。重点技术需结合业务场景落地（如微前端拆分策略、监控数据驱动决策）。</p><h2 id="参考资料分类推荐" tabindex="-1"><a class="header-anchor" href="#参考资料分类推荐"><span><strong>参考资料分类推荐</strong></span></a></h2><h3 id="书籍" tabindex="-1"><a class="header-anchor" href="#书籍"><span><strong>书籍</strong></span></a></h3><ul><li>《JavaScript 高级程序设计》（语言基础）</li><li>《浏览器工作原理与实践》（浏览器机制）</li><li>《Web性能权威指南》（网络与性能优化）</li></ul><h3 id="在线文档" tabindex="-1"><a class="header-anchor" href="#在线文档"><span><strong>在线文档</strong></span></a></h3><ul><li><a href="https://developer.mozilla.org/" target="_blank" rel="noopener noreferrer">MDN Web Docs</a>（HTML/CSS/JS 标准参考）</li><li>[React/Vue 官方文档](https://react.dev/ / https://vuejs.org/)（框架核心）</li><li><a href="https://nodejs.org/en/docs/guides/" target="_blank" rel="noopener noreferrer">Node.js 官方指南</a>（服务端开发）</li></ul><h3 id="工具资源" tabindex="-1"><a class="header-anchor" href="#工具资源"><span><strong>工具资源</strong></span></a></h3><ul><li><a href="https://webpack.docschina.org/" target="_blank" rel="noopener noreferrer">Webpack 中文网</a>（工程化配置）</li><li><a href="https://developer.chrome.com/docs/devtools/" target="_blank" rel="noopener noreferrer">Chrome DevTools 文档</a>（调试与性能分析）</li><li><a href="https://threejs.org/examples/" target="_blank" rel="noopener noreferrer">Three.js 示例库</a>（3D 可视化实践）</li></ul><hr><p>通过系统性学习以上模块，结合参考资料中的理论文档与实战项目，可逐步构建完整的前端技术能力体系。</p><hr><ol><li><strong>先攻基础</strong>：HTML/CSS → JavaScript（ES6+） → 浏览器原理</li><li><strong>框架进阶</strong>：React/Vue选一 → 状态管理 → SSR/SSG</li><li><strong>工程化</strong>：Webpack/Vite → TypeScript → 单元测试</li><li><strong>性能与安全</strong>：缓存策略 → 渲染优化 → XSS/CSRF防御</li><li><strong>扩展领域</strong>：跨端开发 → WebAssembly/PWA</li></ol><p>通过此体系可系统构建前端能力，重点模块需反复实践（如框架原理、性能优化），同时关注社区动态（如Rust在前端的应用趋势）。</p><hr>',139)]))}const i=o(s,[["render",a]]),d=JSON.parse('{"path":"/programmingFrontend/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/","title":"前端基础知识体系","lang":"zh-CN","frontmatter":{"title":"前端基础知识体系","createTime":"2025/04/09 17:38:47","permalink":"/programmingFrontend/前端基础知识体系/"},"headers":[],"readingTime":{"minutes":15.7,"words":4709},"git":{"updatedTime":1754301252000,"contributors":[{"name":"WillBetter","username":"WillBetter","email":"WillWillBetter@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/WillBetter?v=4","url":"https://github.com/WillBetter"}]},"filePathRelative":"notes/programming/frontend/前端基础知识体系/README.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"93b803","sort":10001,"name":"programming"},{"id":"283a67","sort":10002,"name":"frontend"},{"id":"ab1911","sort":10003,"name":"前端基础知识体系"}]}');export{i as comp,d as data};
