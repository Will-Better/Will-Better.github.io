import{_ as s,c as a,a as l,o as t}from"./app-CCZupzhC.js";const n={};function e(h,i){return t(),a("div",null,i[0]||(i[0]=[l(`<h2 id="数据类型划分" tabindex="-1"><a class="header-anchor" href="#数据类型划分"><span>数据类型划分</span></a></h2><p>数据类型决定数据的存储方式和运算方式。Java中的数据类型分为两大类：</p><ol><li>基本数据类型: 变量在栈。在&quot;这里&quot;，存储本身 <ul><li>数值型 <ul><li>整数类型(byte, short, int, long)</li><li>浮点型(float, double)</li></ul></li><li>字符型(char)</li><li>布尔型(boolean)</li></ul></li><li>引用数据类型，变量引用到堆。在&quot;那里&quot;，存储引用地址。 <ul><li>类(class),String也是类</li><li>数组(array)</li><li>接口(interface)</li></ul></li></ol><h2 id="逻辑型" tabindex="-1"><a class="header-anchor" href="#逻辑型"><span>逻辑型</span></a></h2><p>• boolean类型适于逻辑运算，一般用于程序流程控制</p><p>• boolean类型数据只允许取值true或false 不可以0或非0的整数替代true和false。<code>if(a=5)</code>在java中是不允许的</p><h2 id="字符型" tabindex="-1"><a class="header-anchor" href="#字符型"><span>字符型</span></a></h2><ul><li><p>char型数据用来表示通常意义上“字符”</p></li><li><p>字符常量是用单引号括起来的单个字符。<code>char c = &#39;A&#39;</code>;</p></li><li><p>Java字符采用Unicode编码，每个字符占两个字节， 可用十六进制编码形式表示。 <code>char c1 = &#39;\\u0061&#39;</code>;</p></li><li><p>Java语言中还允许使用转义字符&#39;&#39;来将其后的字符转变为其它的含义。 <code>char c2 = &#39;\\n&#39;; //代表换行符</code></p></li></ul><h3 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符"><span>转义字符</span></a></h3><ul><li><p>\\ddd1到3位八进制数所表示的字符(ddd)</p></li><li><p>\\uxxxx 1到4位十六进制数所表示的字符(xxxx) • &#39; 单引号字符</p></li><li><p>&quot; 双引号字符</p></li><li><p>\\ 反斜杠字符</p></li><li><p>\\r 回车</p></li><li><p>\\n 换行</p></li><li><p>\\f 走纸换页</p></li><li><p>\\t 横向跳格</p></li><li><p>\\b 退格</p></li></ul><h2 id="数值型" tabindex="-1"><a class="header-anchor" href="#数值型"><span>数值型</span></a></h2><h3 id="_1-整数型" tabindex="-1"><a class="header-anchor" href="#_1-整数型"><span>1 整数型</span></a></h3><p>Java各整数类型有固定的表数范围和字段长度，而不受具体操作系统的影响，以保证Java程序的可移植性</p><table><thead><tr><th>类型</th><th style="text-align:center;">占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>byte</td><td style="text-align:center;">1字节</td><td>-128 ~ 127</td></tr><tr><td>short</td><td style="text-align:center;">2字节</td><td>-2<sup>15</sup> ~ 2<sup>15</sup>-1</td></tr><tr><td>int</td><td style="text-align:center;">4字节</td><td>-2<sup>31</sup> ~ 2<sup>31</sup>-1</td></tr><tr><td>long</td><td style="text-align:center;">8字节</td><td>-2<sup>63</sup> ~ 2<sup>63</sup>-1</td></tr></tbody></table><ul><li><p>Java语言整型常量的三种表示形式:</p><ul><li><p>十进制整数，如12, -314, 0。</p></li><li><p>八进制整数，要求以0开头，如012</p></li><li><p>十六进制数，要求0x或0X开头，如0x12 二进制数，以0b或0B开头，如0b00010010 (Java7以上)</p></li></ul></li><li><p>Java语言的整型常量默认为int型，如:<code>int i =3;</code></p></li><li><p>声明long型常量可以后加‘ l ’或‘ L ’ ，如: <code>long l = 3L;</code></p></li><li><p><strong>Java中没有“无符号数”</strong>。 可以用long来处理无符号整数(uint)</p></li></ul><hr><h3 id="_2-浮点型" tabindex="-1"><a class="header-anchor" href="#_2-浮点型"><span>2 浮点型</span></a></h3><p>Java浮点类型有固定的表数范围和字段长度：</p><table><thead><tr><th>类型</th><th style="text-align:center;">占用存储空间</th><th>表数范围</th></tr></thead><tbody><tr><td>float</td><td style="text-align:center;">4字节</td><td>-3.403E38~3.403E38</td></tr><tr><td>double</td><td style="text-align:center;">8字节</td><td>-1.798E308~1.798E308</td></tr></tbody></table><ul><li><p>Java浮点类型常量有两种表示形式</p><ul><li>十进制数形式，必须含有小数点，例如: 3.14、314.0、.314 <ul><li>Java7以上: 123_456.789_000 (千分位分割符用下划线表示)</li></ul></li><li>科学记数法形式，如：3.14e2、 3.14E2、 314E2</li></ul></li><li><p>Java浮点型常量默认为double型, 如要声明一个常量为float型，则需在数字后面加f或F，如:<code>double d = 3.14; float f = 3.14f;</code></p></li></ul><h2 id="变量声明和赋值" tabindex="-1"><a class="header-anchor" href="#变量声明和赋值"><span>变量声明和赋值</span></a></h2><details class="hint-container details"><summary>示例代码</summary><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [])</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        boolean</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   //声明boolean型变量并赋值</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 声明int型变量</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        float</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4.5f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 声明float型变量并赋值</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        double</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3.1415</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  //声明double型变量并赋值</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        char</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //声明char型变量</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        c </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\u</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">0031</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   //为char型变量赋值</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        x </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 12</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     //为int型变量赋值</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="标识符-identifier" tabindex="-1"><a class="header-anchor" href="#标识符-identifier"><span>标识符(Identifier)</span></a></h2><ul><li><p>名字就是标识符:任何一个变量、常量、方法、对象和类都需要有名字。</p></li><li><p>标识符要满足如下的规定:</p><ol><li>标识符可以由字母、数字和下划线(_)、美元符号($)组合而成;</li><li>标识符必须以字母、下划线或美元符号开头，不能以数字开头。</li></ol></li><li><p>标识符最好与其意义相符，以增加程序的可读性</p></li><li><p>应注意<mark class="important">Java是大小写敏感的语言</mark>。</p><ul><li>按Java惯例，类名首字母用大写(Pascal)</li><li>其余的(包名、方法名、变量名)首字母都小写(camel)</li><li>少用下划线</li><li>变量、常量随使用随定义</li></ul></li></ul>`,24)]))}const d=s(n,[["render",e]]),r=JSON.parse('{"path":"/programmingJava/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%8C%97%E5%A4%A7/tafsfnrn/","title":"数据类型-常量-变量","lang":"zh-CN","frontmatter":{"title":"数据类型-常量-变量","createTime":"2025/04/08 18:19:06","permalink":"/programmingJava/Java程序设计北大/tafsfnrn/"},"headers":[],"readingTime":{"minutes":3.35,"words":1005},"git":{"updatedTime":1754301252000,"contributors":[{"name":"WillBetter","username":"WillBetter","email":"WillWillBetter@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/WillBetter?v=4","url":"https://github.com/WillBetter"}]},"filePathRelative":"notes/programming/Java/Java程序设计北大/3.数据运算-流控制-数组/1.数据类型-常量-变量.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"93b803","sort":10001,"name":"programming"},{"id":"ea3a17","sort":10004,"name":"Java"},{"id":"2ad0a4","sort":10005,"name":"Java程序设计北大"},{"id":"a84f38","sort":3,"name":"数据运算-流控制-数组"}]}');export{d as comp,r as data};
