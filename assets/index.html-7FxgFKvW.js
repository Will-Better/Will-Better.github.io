import{_ as i,c as a,a as n,o as l}from"./app-CCZupzhC.js";const e={};function h(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="_1-类" tabindex="-1"><a class="header-anchor" href="#_1-类"><span>1 类</span></a></h2><p>类是组成Java程序的基本要素，是一类对象的原型，它封装了一类对象的状态和方法</p><details class="hint-container details"><summary>类相关代码</summary><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //字段</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    String</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //方法</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sayHello</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello! My name is</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> name </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //构造方法：与类名相同，且不写返回数据类型</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    Person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ){</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        name </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        age </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 使用对象，使用“.”点运算符来访问对象的字段和方法 =&gt; 封装性 + 安全性</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Person</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> );</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sayHello</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="类的字段和方法" tabindex="-1"><a class="header-anchor" href="#类的字段和方法"><span>类的字段和方法</span></a></h3><ul><li>字段(field)是类的属性，是用<strong>变量</strong>来表示的，又称为域、域变量、属性、成员变量等。</li><li>方法(method)是类的功能和操作, 是用函数来表示的</li></ul><hr><h3 id="类的构造方法" tabindex="-1"><a class="header-anchor" href="#类的构造方法"><span>类的构造方法</span></a></h3><p>构造方法(constructor )是一种特殊的方法，用来初始化(<code>new</code>)该类的一个新的对象。</p><p><strong>默认构造方法</strong></p><ul><li>一般情况下，类都有一个至多个构造方法。</li><li><strong>如果没有定义任何构造方法</strong>，系统会自动产生一个构造方法，称为默认构造方法(default constructor)。</li><li>默认构造方法不带参数，并且方法体为空。</li></ul><h2 id="_2-方法重载-overload" tabindex="-1"><a class="header-anchor" href="#_2-方法重载-overload"><span>2 方法重载(overload)</span></a></h2><ul><li>方法重载(overloading)：多个方法有相同的名字，编译时能识别出来。</li><li>这些方法的<mark class="tip">签名(signature)</mark>不同，或者是<mark class="tip">参数个数</mark>不同，或者是<mark class="tip">参数类型</mark>不同。</li><li>通过方法重载可以实现多态(polymorphism)。</li></ul><h2 id="_3-this的使用" tabindex="-1"><a class="header-anchor" href="#_3-this的使用"><span>3 this的使用</span></a></h2><details class="hint-container details"><summary>this的使用-代码示例</summary><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Person的sayHello()方法</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sayHello</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello! My name is</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> name </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 1. 在方法及构造方法中，使用this来访问字段及方法 =&gt; 等价于</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello! My name is</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> );</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// Person的构造方法</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> String name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> name </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 2. 使用this解决局部变量与域同名的问题</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//多个构造函数 - 方法重载</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 3. 构造方法中，用this调用另一构造方法</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //调用了Person( String name, int name )构造函数</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 必须放在第一行</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">name</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">14</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_4-类的继承" tabindex="-1"><a class="header-anchor" href="#_4-类的继承"><span>4 类的继承</span></a></h2><p>继承(inheritance)是面向对象的程序设计中最为重要的特征之一。它包含<strong>子类(subclass)<strong>和</strong>父类|超类(superclass)</strong>。</p><ul><li>父类包括所有直接或间接被继承的类</li><li>Java支持单继承：<strong>一个类只能有一个直接父类。</strong></li><li>子类继承父类的状态和行为. <ul><li>可以修改父类的状态或重载父类的行为</li><li>可以添加新的状态和行为。</li></ul></li><li>继承的好处 <ul><li>可以提高程序的抽象程度</li><li>实现代码重用，提高开发效率和可维护性</li></ul></li></ul><h3 id="_4-1-继承的实现和关系" tabindex="-1"><a class="header-anchor" href="#_4-1-继承的实现和关系"><span>4.1 继承的实现和关系</span></a></h3><p>Java中的继承是通过extends关键字来实现的。<code>class Student extends Person { ... }</code>。</p><p>如果没有extends子句，则该类默认为java.lang.Object的子类。</p><ul><li>所有的类都是通过直接或间接地继承java.lang.Object得到的。</li></ul><p><strong>继承关系</strong> 继承关系在UML图中，是用一个箭头来表示子类与父类的关系的。<strong>子类指向父类，相当于 is a</strong>。</p><hr><h3 id="_4-2-子类的字段" tabindex="-1"><a class="header-anchor" href="#_4-2-子类的字段"><span>4.2 子类的字段</span></a></h3><ol><li>字段的继承：子类可以继承父类的所有字段，eg：Student自动具有Person的属性(name，age)</li><li>字段的隐藏：子类重新定义一个与父类的域变量完全相同的变量，在实际编程中用得较少。</li><li>字段的添加：在定义子类时，加上新的域变量。</li></ol><hr><h3 id="_4-3-子类的方法" tabindex="-1"><a class="header-anchor" href="#_4-3-子类的方法"><span>4.3 子类的方法</span></a></h3><ol><li>方法的继承：父类的非私有方法也可以被子类自动继承。eg：Student自动继承Person的方法sayHello()</li><li>方法的覆盖(Override)：子类也可以重新定义与父类同名的方法，实现对父类方法的覆盖(Override)。 <ul><li>JDK1.5以后可以用<code>@Override</code>这个注记来表示(不用也是可以的)</li><li>通过方法的覆盖，能够修改对象的同名方法的具体实现方法。</li></ul></li><li>方法的添加：子类可以新加一些方法</li><li>方法的重载：与方法覆盖不同的是，重载不要求参数类型列表相同。重载的方法实际是新加的方法。</li></ol><hr><h3 id="_4-4-super的使用" tabindex="-1"><a class="header-anchor" href="#_4-4-super的使用"><span>4.4 super的使用</span></a></h3><ol><li>使用super访问父类的域和方法，有时需要使用super以区别同名的域与方法。 <ul><li>由于继承，使用this可以访问父类的域和方法。但有时为了明确地指明父类的域和方法，就要用关键字super。</li><li><code>this.age == super.age</code> 都是继承自父类的age。区分是子类自带还是来自父类</li><li>使用super可以访问被子类所隐藏了的同名变量或被子类覆盖的父类方法。<code>super.sayHello();</code>调用父类方法而非子类的。</li></ul></li><li>使用父类的构造方法，构造函数不能被继承。 <ul><li>父类Person有一个构造方法<code>Person(String, int)</code>，子类Student不会自动生成构造方法<code>Student(String, int)</code>。</li><li>子类在构造方法中，可以用super来调用父类的构造方法。使用时super()必须放在第一句。</li><li><code>Student(String name, int age, String school ){ super(name,age); ...}</code></li></ul></li></ol><hr><h3 id="_4-5-父类与子类对象的转换" tabindex="-1"><a class="header-anchor" href="#_4-5-父类与子类对象的转换"><span>4.5 父类与子类对象的转换</span></a></h3><p>类似于基本数据类型数据之间的强制类型转换，存在继承关系的父类对象和子类对象之间也可以在一定条件下相互转换。</p><ol><li>子类对象可以被视为其父类的一个对象；（子类是父类 =&gt; 学生是人）</li><li>父类对象不能被当做其某一个子类的对象； （父类不一定是子类 =&gt; 人是学生）</li><li>子类可以代替父类进行传参=&gt;1号规则的变体。<code>say(Person p){}</code> 可以这样调用<code>say(new Student())</code></li><li>特殊情况下父类可强制转换为子类 =&gt; <strong>强制类型转换(casting)</strong> ： <ul><li><code>Person p = new Student(&quot;ll&quot;,18,&quot;tt&quot;); Student s = (Student) p;</code> 可转换</li><li><code>Person p = new Person(&quot;ll&quot;,18&quot;); Student s = (Student) p;</code> 编写时候不报错，运行报错，不可转换</li></ul></li></ol>`,35)]))}const p=i(e,[["render",h]]),r=JSON.parse('{"path":"/programmingJava/Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%8C%97%E5%A4%A7/4zfwetet/","title":"类、字段和方法","lang":"zh-CN","frontmatter":{"title":"类、字段和方法","createTime":"2025/05/07 09:36:04","permalink":"/programmingJava/Java程序设计北大/4zfwetet/"},"headers":[],"readingTime":{"minutes":5.04,"words":1511},"git":{"updatedTime":1754301252000,"contributors":[{"name":"WillBetter","username":"WillBetter","email":"WillWillBetter@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/WillBetter?v=4","url":"https://github.com/WillBetter"}]},"filePathRelative":"notes/programming/Java/Java程序设计北大/4.类、包和接口/1.类、字段方法和继承.md","categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"93b803","sort":10001,"name":"programming"},{"id":"ea3a17","sort":10004,"name":"Java"},{"id":"2ad0a4","sort":10005,"name":"Java程序设计北大"},{"id":"01dfb7","sort":4,"name":"类、包和接口"}]}');export{p as comp,r as data};
